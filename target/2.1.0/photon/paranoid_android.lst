
c:/Users/jsulz/dev/paranoid_android/paranoid_android/target/2.1.0/photon/paranoid_android.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002bf0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2c10  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a2c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000608  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2c84  080a2c84  00022c84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2cac  080a2cac  00022cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00105aa4  00000000  00000000  00022cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013690  00000000  00000000  00128754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014cbe  00000000  00000000  0013bde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d58  00000000  00000000  00150aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000043b8  00000000  00000000  001527fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027cab  00000000  00000000  00156bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a018  00000000  00000000  0017e85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aea6d  00000000  00000000  001a8875  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004b28  00000000  00000000  002572e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 fc75 	bl	80a2920 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 fc7d 	bl	80a293c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2c14 	.word	0x080a2c14
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000678 	.word	0x20000678
 80a005c:	20000678 	.word	0x20000678

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 f8c1 	bl	80a11e8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a2be8 	.word	0x080a2be8
 80a0084:	080a2c08 	.word	0x080a2c08

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b86c 	b.w	80a0164 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa15 	bl	80a04bc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f001 b869 	b.w	80a116c <_post_loop>

080a009a <_Znaj>:
 80a009a:	f000 be55 	b.w	80a0d48 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 be5b 	b.w	80a0d58 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
 80a00b2:	0000      	movs	r0, r0
 80a00b4:	0000      	movs	r0, r0
	...

080a00b8 <_Z7rainIRQv>:


void rainIRQ()
// Count rain gauge bucket tips as they occur
// Activated by the magnet and reed switch in the rain gauge, attached to input D2
{
 80a00b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00ba:	f000 fcad 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
	raintime = millis(); // grab current time
 80a00be:	4c18      	ldr	r4, [pc, #96]	; (80a0120 <_Z7rainIRQv+0x68>)
	raininterval = raintime - rainlast; // calculate interval between this and last event
 80a00c0:	4d18      	ldr	r5, [pc, #96]	; (80a0124 <_Z7rainIRQv+0x6c>)
	raintime = millis(); // grab current time
 80a00c2:	6020      	str	r0, [r4, #0]
	raininterval = raintime - rainlast; // calculate interval between this and last event
 80a00c4:	6823      	ldr	r3, [r4, #0]
 80a00c6:	682a      	ldr	r2, [r5, #0]
 80a00c8:	1a9b      	subs	r3, r3, r2
 80a00ca:	4a17      	ldr	r2, [pc, #92]	; (80a0128 <_Z7rainIRQv+0x70>)
 80a00cc:	6013      	str	r3, [r2, #0]

	if (raininterval > 10) // ignore switch-bounce glitches less than 10mS after initial edge
 80a00ce:	6813      	ldr	r3, [r2, #0]
 80a00d0:	2b0a      	cmp	r3, #10
 80a00d2:	d91d      	bls.n	80a0110 <_Z7rainIRQv+0x58>
	{
		dailyrainin += 0.011; //Each dump is 0.011" of water
 80a00d4:	4e15      	ldr	r6, [pc, #84]	; (80a012c <_Z7rainIRQv+0x74>)
 80a00d6:	6830      	ldr	r0, [r6, #0]
 80a00d8:	f001 fe16 	bl	80a1d08 <__aeabi_f2d>
 80a00dc:	a30e      	add	r3, pc, #56	; (adr r3, 80a0118 <_Z7rainIRQv+0x60>)
 80a00de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a00e2:	f001 fcb3 	bl	80a1a4c <__adddf3>
 80a00e6:	f002 f95f 	bl	80a23a8 <__aeabi_d2f>
		rainHour[minutes] += 0.011; //Increase this minute's amount of rain
 80a00ea:	4b11      	ldr	r3, [pc, #68]	; (80a0130 <_Z7rainIRQv+0x78>)
		dailyrainin += 0.011; //Each dump is 0.011" of water
 80a00ec:	6030      	str	r0, [r6, #0]
		rainHour[minutes] += 0.011; //Increase this minute's amount of rain
 80a00ee:	781f      	ldrb	r7, [r3, #0]
 80a00f0:	4e10      	ldr	r6, [pc, #64]	; (80a0134 <_Z7rainIRQv+0x7c>)
 80a00f2:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 80a00f6:	f001 fe07 	bl	80a1d08 <__aeabi_f2d>
 80a00fa:	a307      	add	r3, pc, #28	; (adr r3, 80a0118 <_Z7rainIRQv+0x60>)
 80a00fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0100:	f001 fca4 	bl	80a1a4c <__adddf3>
 80a0104:	f002 f950 	bl	80a23a8 <__aeabi_d2f>
 80a0108:	f846 0027 	str.w	r0, [r6, r7, lsl #2]

		rainlast = raintime; // set up for next event
 80a010c:	6823      	ldr	r3, [r4, #0]
 80a010e:	602b      	str	r3, [r5, #0]
	}
}
 80a0110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0112:	bf00      	nop
 80a0114:	f3af 8000 	nop.w
 80a0118:	020c49ba 	.word	0x020c49ba
 80a011c:	3f86872b 	.word	0x3f86872b
 80a0120:	20000190 	.word	0x20000190
 80a0124:	2000018c 	.word	0x2000018c
 80a0128:	20000188 	.word	0x20000188
 80a012c:	2000007c 	.word	0x2000007c
 80a0130:	20000090 	.word	0x20000090
 80a0134:	20000098 	.word	0x20000098

080a0138 <_Z9wspeedIRQv>:

void wspeedIRQ()
// Activated by the magnet in the anemometer (2 ticks per rotation), attached to input D3
{
 80a0138:	b510      	push	{r4, lr}
 80a013a:	f000 fc6d 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastWindIRQ > 10) // Ignore switch-bounce glitches less than 10ms (142MPH max reading) after the reed switch closes
 80a013e:	4c07      	ldr	r4, [pc, #28]	; (80a015c <_Z9wspeedIRQv+0x24>)
 80a0140:	6823      	ldr	r3, [r4, #0]
 80a0142:	1ac0      	subs	r0, r0, r3
 80a0144:	280a      	cmp	r0, #10
 80a0146:	d907      	bls.n	80a0158 <_Z9wspeedIRQv+0x20>
 80a0148:	f000 fc66 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
	{
		lastWindIRQ = millis(); //Grab the current time
		windClicks++; //There is 1.492MPH for each click per second.
 80a014c:	4a04      	ldr	r2, [pc, #16]	; (80a0160 <_Z9wspeedIRQv+0x28>)
		lastWindIRQ = millis(); //Grab the current time
 80a014e:	6020      	str	r0, [r4, #0]
		windClicks++; //There is 1.492MPH for each click per second.
 80a0150:	7813      	ldrb	r3, [r2, #0]
 80a0152:	3301      	adds	r3, #1
 80a0154:	b2db      	uxtb	r3, r3
 80a0156:	7013      	strb	r3, [r2, #0]
	}
}
 80a0158:	bd10      	pop	{r4, pc}
 80a015a:	bf00      	nop
 80a015c:	2000008c 	.word	0x2000008c
 80a0160:	2000019c 	.word	0x2000019c

080a0164 <setup>:

//---------------------------------------------------------------
void setup()
{
 80a0164:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Serial.begin(9600);   // open serial over USB at 9600 baud
 80a0166:	f001 f93f 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a016a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a016e:	f001 f921 	bl	80a13b4 <_ZN9USBSerial5beginEl>

    // Make sure your Serial Terminal app is closed before powering your device
    // Now open your Serial Terminal, and hit any key to continue!
    Serial.println("Press any key to begin");
 80a0172:	f001 f939 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0176:	4920      	ldr	r1, [pc, #128]	; (80a01f8 <setup+0x94>)
 80a0178:	f000 fe73 	bl	80a0e62 <_ZN5Print7printlnEPKc>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a017c:	4c1f      	ldr	r4, [pc, #124]	; (80a01fc <setup+0x98>)
    //This line pauses the Serial port until a key is pressed
    while(!Serial.available()) Spark.process();
 80a017e:	f001 f933 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0182:	6803      	ldr	r3, [r0, #0]
 80a0184:	691b      	ldr	r3, [r3, #16]
 80a0186:	4798      	blx	r3
 80a0188:	b928      	cbnz	r0, 80a0196 <setup+0x32>
		return HAL_Timer_Get_Milli_Seconds();
 80a018a:	f000 fc45 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 80a018e:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0190:	f000 fdca 	bl	80a0d28 <spark_process>
    }
 80a0194:	e7f3      	b.n	80a017e <setup+0x1a>
    sensor.enableEventFlags(); //Necessary register calls to enble temp, baro and alt

    pinMode( WSPEED, INPUT_PULLUP );
    pinMode(WDIR, INPUT);
    pinMode(RAIN, INPUT_PULLUP);
    attachInterrupt(RAIN, rainIRQ, FALLING);
 80a0196:	2500      	movs	r5, #0
    sensor.begin();
 80a0198:	4819      	ldr	r0, [pc, #100]	; (80a0200 <setup+0x9c>)
 80a019a:	f000 fa8b 	bl	80a06b4 <_ZN7Weather5beginEv>
    sensor.setModeBarometer();//Set to Barometer Mode
 80a019e:	4818      	ldr	r0, [pc, #96]	; (80a0200 <setup+0x9c>)
 80a01a0:	f000 faf1 	bl	80a0786 <_ZN7Weather16setModeBarometerEv>
    pinMode( WSPEED, INPUT_PULLUP );
 80a01a4:	4c17      	ldr	r4, [pc, #92]	; (80a0204 <setup+0xa0>)
    sensor.setOversampleRate(7); // Set Oversample rate
 80a01a6:	2107      	movs	r1, #7
 80a01a8:	4815      	ldr	r0, [pc, #84]	; (80a0200 <setup+0x9c>)
 80a01aa:	f000 faf9 	bl	80a07a0 <_ZN7Weather17setOversampleRateEh>
    sensor.enableEventFlags(); //Necessary register calls to enble temp, baro and alt
 80a01ae:	4814      	ldr	r0, [pc, #80]	; (80a0200 <setup+0x9c>)
 80a01b0:	f000 fb0a 	bl	80a07c8 <_ZN7Weather16enableEventFlagsEv>
    pinMode(RAIN, INPUT_PULLUP);
 80a01b4:	4e14      	ldr	r6, [pc, #80]	; (80a0208 <setup+0xa4>)
    pinMode( WSPEED, INPUT_PULLUP );
 80a01b6:	8820      	ldrh	r0, [r4, #0]
 80a01b8:	2102      	movs	r1, #2
 80a01ba:	f001 fbb7 	bl	80a192c <pinMode>
    pinMode(WDIR, INPUT);
 80a01be:	2100      	movs	r1, #0
 80a01c0:	200a      	movs	r0, #10
 80a01c2:	f001 fbb3 	bl	80a192c <pinMode>
    pinMode(RAIN, INPUT_PULLUP);
 80a01c6:	8830      	ldrh	r0, [r6, #0]
 80a01c8:	2102      	movs	r1, #2
 80a01ca:	f001 fbaf 	bl	80a192c <pinMode>
    attachInterrupt(RAIN, rainIRQ, FALLING);
 80a01ce:	f04f 33ff 	mov.w	r3, #4294967295
 80a01d2:	2202      	movs	r2, #2
 80a01d4:	490d      	ldr	r1, [pc, #52]	; (80a020c <setup+0xa8>)
 80a01d6:	8830      	ldrh	r0, [r6, #0]
 80a01d8:	9500      	str	r5, [sp, #0]
 80a01da:	f001 f96d 	bl	80a14b8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(WSPEED, wspeedIRQ, FALLING);
 80a01de:	9500      	str	r5, [sp, #0]
 80a01e0:	f04f 33ff 	mov.w	r3, #4294967295
 80a01e4:	2202      	movs	r2, #2
 80a01e6:	490a      	ldr	r1, [pc, #40]	; (80a0210 <setup+0xac>)
 80a01e8:	8820      	ldrh	r0, [r4, #0]
 80a01ea:	f001 f965 	bl	80a14b8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    interrupts();

}
 80a01ee:	b002      	add	sp, #8
 80a01f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    interrupts();
 80a01f4:	f001 b98a 	b.w	80a150c <_Z10interruptsv>
 80a01f8:	080a29b8 	.word	0x080a29b8
 80a01fc:	20000644 	.word	0x20000644
 80a0200:	20000194 	.word	0x20000194
 80a0204:	20000004 	.word	0x20000004
 80a0208:	20000000 	.word	0x20000000
 80a020c:	080a00b9 	.word	0x080a00b9
 80a0210:	080a0139 	.word	0x080a0139
 80a0214:	00000000 	.word	0x00000000

080a0218 <_Z9printInfov>:
  int wind_dir = get_wind_direction();

}
//---------------------------------------------------------------
void printInfo()
{
 80a0218:	b537      	push	{r0, r1, r2, r4, r5, lr}
//This function prints the weather data out to the default Serial Port

  Serial.print("Temp:");
 80a021a:	f001 f8e5 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a021e:	493e      	ldr	r1, [pc, #248]	; (80a0318 <_Z9printInfov+0x100>)
 80a0220:	f000 fe0c 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.print(tempf);
 80a0224:	f001 f8e0 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0228:	4b3c      	ldr	r3, [pc, #240]	; (80a031c <_Z9printInfov+0x104>)
  Serial.print("F, ");
 80a022a:	4c3d      	ldr	r4, [pc, #244]	; (80a0320 <_Z9printInfov+0x108>)
  Serial.print(tempf);
 80a022c:	6819      	ldr	r1, [r3, #0]
 80a022e:	2202      	movs	r2, #2
 80a0230:	f000 fefe 	bl	80a1030 <_ZN5Print5printEfi>
  Serial.print("F, ");
 80a0234:	f001 f8d8 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0238:	4621      	mov	r1, r4
 80a023a:	f000 fdff 	bl	80a0e3c <_ZN5Print5printEPKc>

  Serial.print("Humidity:");
 80a023e:	f001 f8d3 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0242:	4938      	ldr	r1, [pc, #224]	; (80a0324 <_Z9printInfov+0x10c>)
 80a0244:	f000 fdfa 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.print(humidity);
 80a0248:	f001 f8ce 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a024c:	4b36      	ldr	r3, [pc, #216]	; (80a0328 <_Z9printInfov+0x110>)
 80a024e:	2202      	movs	r2, #2
 80a0250:	6819      	ldr	r1, [r3, #0]
 80a0252:	f000 feed 	bl	80a1030 <_ZN5Print5printEfi>
  Serial.print("%, ");
 80a0256:	f001 f8c7 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a025a:	4934      	ldr	r1, [pc, #208]	; (80a032c <_Z9printInfov+0x114>)
 80a025c:	f000 fdee 	bl	80a0e3c <_ZN5Print5printEPKc>

  Serial.print("Baro_Temp:");
 80a0260:	f001 f8c2 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0264:	4932      	ldr	r1, [pc, #200]	; (80a0330 <_Z9printInfov+0x118>)
 80a0266:	f000 fde9 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.print(baroTemp);
 80a026a:	f001 f8bd 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a026e:	4b31      	ldr	r3, [pc, #196]	; (80a0334 <_Z9printInfov+0x11c>)
 80a0270:	2202      	movs	r2, #2
 80a0272:	6819      	ldr	r1, [r3, #0]
 80a0274:	f000 fedc 	bl	80a1030 <_ZN5Print5printEfi>
  Serial.print("F, ");
 80a0278:	f001 f8b6 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a027c:	4621      	mov	r1, r4
 80a027e:	f000 fddd 	bl	80a0e3c <_ZN5Print5printEPKc>

  Serial.print("Pressure:");
 80a0282:	f001 f8b1 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0286:	492c      	ldr	r1, [pc, #176]	; (80a0338 <_Z9printInfov+0x120>)
 80a0288:	f000 fdd8 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.print(pascals/100);
 80a028c:	f001 f8ac 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0290:	4d2a      	ldr	r5, [pc, #168]	; (80a033c <_Z9printInfov+0x124>)
 80a0292:	4604      	mov	r4, r0
 80a0294:	492a      	ldr	r1, [pc, #168]	; (80a0340 <_Z9printInfov+0x128>)
 80a0296:	6828      	ldr	r0, [r5, #0]
 80a0298:	f002 fa98 	bl	80a27cc <__aeabi_fdiv>
 80a029c:	2202      	movs	r2, #2
 80a029e:	4601      	mov	r1, r0
 80a02a0:	4620      	mov	r0, r4
 80a02a2:	f000 fec5 	bl	80a1030 <_ZN5Print5printEfi>
  Serial.print("hPa, ");
 80a02a6:	f001 f89f 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a02aa:	4926      	ldr	r1, [pc, #152]	; (80a0344 <_Z9printInfov+0x12c>)
 80a02ac:	f000 fdc6 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.print((pascals/100) * 0.0295300);
 80a02b0:	f001 f89a 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a02b4:	4922      	ldr	r1, [pc, #136]	; (80a0340 <_Z9printInfov+0x128>)
 80a02b6:	4604      	mov	r4, r0
 80a02b8:	6828      	ldr	r0, [r5, #0]
 80a02ba:	f002 fa87 	bl	80a27cc <__aeabi_fdiv>
 80a02be:	f001 fd23 	bl	80a1d08 <__aeabi_f2d>
 80a02c2:	a313      	add	r3, pc, #76	; (adr r3, 80a0310 <_Z9printInfov+0xf8>)
 80a02c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02c8:	f001 fd76 	bl	80a1db8 <__aeabi_dmul>
 80a02cc:	2502      	movs	r5, #2
 80a02ce:	4602      	mov	r2, r0
 80a02d0:	460b      	mov	r3, r1
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	9500      	str	r5, [sp, #0]
 80a02d6:	f000 feba 	bl	80a104e <_ZN5Print5printEdi>
  Serial.print("in.Hg ");
 80a02da:	f001 f885 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a02de:	491a      	ldr	r1, [pc, #104]	; (80a0348 <_Z9printInfov+0x130>)
 80a02e0:	f000 fdac 	bl	80a0e3c <_ZN5Print5printEPKc>

  Serial.print("Wind Speed: ");
 80a02e4:	f001 f880 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a02e8:	4918      	ldr	r1, [pc, #96]	; (80a034c <_Z9printInfov+0x134>)
 80a02ea:	f000 fda7 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.print(curr_wind_speed);
 80a02ee:	f001 f87b 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a02f2:	4b17      	ldr	r3, [pc, #92]	; (80a0350 <_Z9printInfov+0x138>)
 80a02f4:	462a      	mov	r2, r5
 80a02f6:	6819      	ldr	r1, [r3, #0]
 80a02f8:	f000 fe9a 	bl	80a1030 <_ZN5Print5printEfi>
  Serial.println("mph, ");
 80a02fc:	f001 f874 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0300:	4914      	ldr	r1, [pc, #80]	; (80a0354 <_Z9printInfov+0x13c>)
  //If in altitude mode, print with these lines
  //Serial.print("Altitude:");
  //Serial.print(altf);
  //Serial.println("ft.");

}
 80a0302:	b003      	add	sp, #12
 80a0304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println("mph, ");
 80a0308:	f000 bdab 	b.w	80a0e62 <_ZN5Print7printlnEPKc>
 80a030c:	f3af 8000 	nop.w
 80a0310:	c100e6b0 	.word	0xc100e6b0
 80a0314:	3f9e3d1c 	.word	0x3f9e3d1c
 80a0318:	080a29e6 	.word	0x080a29e6
 80a031c:	20000198 	.word	0x20000198
 80a0320:	080a29cf 	.word	0x080a29cf
 80a0324:	080a29d3 	.word	0x080a29d3
 80a0328:	20000080 	.word	0x20000080
 80a032c:	080a29dd 	.word	0x080a29dd
 80a0330:	080a29e1 	.word	0x080a29e1
 80a0334:	20000074 	.word	0x20000074
 80a0338:	080a29ec 	.word	0x080a29ec
 80a033c:	20000094 	.word	0x20000094
 80a0340:	42c80000 	.word	0x42c80000
 80a0344:	080a29f6 	.word	0x080a29f6
 80a0348:	080a29fc 	.word	0x080a29fc
 80a034c:	080a2a03 	.word	0x080a2a03
 80a0350:	20000078 	.word	0x20000078
 80a0354:	080a2a10 	.word	0x080a2a10

080a0358 <_Z14get_wind_speedv>:

/****************Wind Functions***************************/

//Returns the instataneous wind speed
float get_wind_speed()
{
 80a0358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a035a:	f000 fb5d 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
	float deltaTime = millis() - lastWindCheck; //750ms
 80a035e:	4c2e      	ldr	r4, [pc, #184]	; (80a0418 <_Z14get_wind_speedv+0xc0>)

	deltaTime /= 1000.0; //Covert to seconds

	float windSpeed = (float)windClicks / deltaTime; //3 / 0.750s = 4
 80a0360:	4e2e      	ldr	r6, [pc, #184]	; (80a041c <_Z14get_wind_speedv+0xc4>)
	float deltaTime = millis() - lastWindCheck; //750ms
 80a0362:	6823      	ldr	r3, [r4, #0]
 80a0364:	1ac0      	subs	r0, r0, r3
 80a0366:	f002 f925 	bl	80a25b4 <__aeabi_ui2f>
 80a036a:	4607      	mov	r7, r0
	float windSpeed = (float)windClicks / deltaTime; //3 / 0.750s = 4
 80a036c:	7830      	ldrb	r0, [r6, #0]
 80a036e:	f002 f921 	bl	80a25b4 <__aeabi_ui2f>
	deltaTime /= 1000.0; //Covert to seconds
 80a0372:	492b      	ldr	r1, [pc, #172]	; (80a0420 <_Z14get_wind_speedv+0xc8>)
	float windSpeed = (float)windClicks / deltaTime; //3 / 0.750s = 4
 80a0374:	4605      	mov	r5, r0
	deltaTime /= 1000.0; //Covert to seconds
 80a0376:	4638      	mov	r0, r7
 80a0378:	f002 fa28 	bl	80a27cc <__aeabi_fdiv>
 80a037c:	4601      	mov	r1, r0
	float windSpeed = (float)windClicks / deltaTime; //3 / 0.750s = 4
 80a037e:	4628      	mov	r0, r5
 80a0380:	f002 fa24 	bl	80a27cc <__aeabi_fdiv>
 80a0384:	4605      	mov	r5, r0

  Serial.print("Windclick:");
 80a0386:	f001 f82f 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a038a:	4926      	ldr	r1, [pc, #152]	; (80a0424 <_Z14get_wind_speedv+0xcc>)
 80a038c:	f000 fd56 	bl	80a0e3c <_ZN5Print5printEPKc>
  Serial.println(windClicks);
 80a0390:	f001 f82a 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0394:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0396:	220a      	movs	r2, #10
 80a0398:	7831      	ldrb	r1, [r6, #0]
 80a039a:	f000 fd6c 	bl	80a0e76 <_ZN5Print11printNumberEmh>
        n += println();
 80a039e:	4638      	mov	r0, r7
 80a03a0:	f000 fd53 	bl	80a0e4a <_ZN5Print7printlnEv>

	windClicks = 0; //Reset and start watching for new wind
 80a03a4:	2300      	movs	r3, #0
 80a03a6:	7033      	strb	r3, [r6, #0]
 80a03a8:	f000 fb36 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
	lastWindCheck = millis();
 80a03ac:	6020      	str	r0, [r4, #0]

	windSpeed *= 1.492; //4 * 1.492 = 5.968MPH
 80a03ae:	4628      	mov	r0, r5
 80a03b0:	f001 fcaa 	bl	80a1d08 <__aeabi_f2d>
 80a03b4:	a316      	add	r3, pc, #88	; (adr r3, 80a0410 <_Z14get_wind_speedv+0xb8>)
 80a03b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03ba:	f001 fcfd 	bl	80a1db8 <__aeabi_dmul>
 80a03be:	f001 fff3 	bl	80a23a8 <__aeabi_d2f>
 80a03c2:	4605      	mov	r5, r0

	 Serial.println();
 80a03c4:	f001 f810 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a03c8:	f000 fd3f 	bl	80a0e4a <_ZN5Print7printlnEv>
	 Serial.print("Windspeed:");
 80a03cc:	f001 f80c 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a03d0:	4915      	ldr	r1, [pc, #84]	; (80a0428 <_Z14get_wind_speedv+0xd0>)
 80a03d2:	f000 fd33 	bl	80a0e3c <_ZN5Print5printEPKc>
	 Serial.println(windSpeed);
 80a03d6:	f001 f807 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a03da:	2202      	movs	r2, #2
 80a03dc:	4629      	mov	r1, r5
 80a03de:	f000 fe49 	bl	80a1074 <_ZN5Print7printlnEfi>
   Serial.println(lastWindCheck);
 80a03e2:	f001 f801 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a03e6:	6824      	ldr	r4, [r4, #0]
 80a03e8:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 80a03ea:	2c00      	cmp	r4, #0
 80a03ec:	da0c      	bge.n	80a0408 <_Z14get_wind_speedv+0xb0>
            t = print('-');
 80a03ee:	212d      	movs	r1, #45	; 0x2d
 80a03f0:	f000 fd28 	bl	80a0e44 <_ZN5Print5printEc>
            val = -n;
 80a03f4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a03f6:	220a      	movs	r2, #10
 80a03f8:	4630      	mov	r0, r6
 80a03fa:	f000 fd3c 	bl	80a0e76 <_ZN5Print11printNumberEmh>
        n += println();
 80a03fe:	4630      	mov	r0, r6
 80a0400:	f000 fd23 	bl	80a0e4a <_ZN5Print7printlnEv>

	return(windSpeed);
}
 80a0404:	4628      	mov	r0, r5
 80a0406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
 80a0408:	4621      	mov	r1, r4
 80a040a:	e7f4      	b.n	80a03f6 <_Z14get_wind_speedv+0x9e>
 80a040c:	f3af 8000 	nop.w
 80a0410:	645a1cac 	.word	0x645a1cac
 80a0414:	3ff7df3b 	.word	0x3ff7df3b
 80a0418:	20000088 	.word	0x20000088
 80a041c:	2000019c 	.word	0x2000019c
 80a0420:	447a0000 	.word	0x447a0000
 80a0424:	080a2a16 	.word	0x080a2a16
 80a0428:	080a2a21 	.word	0x080a2a21

080a042c <_Z17averageAnalogReadi>:

//Takes an average of readings on a given pin
//Returns the average
int averageAnalogRead(int pinToRead)
{
 80a042c:	b570      	push	{r4, r5, r6, lr}
 80a042e:	2508      	movs	r5, #8
	byte numberOfReadings = 8;
	unsigned int runningValue = 0;
 80a0430:	2400      	movs	r4, #0

	for(int x = 0 ; x < numberOfReadings ; x++)
		runningValue += analogRead(pinToRead);
 80a0432:	b286      	uxth	r6, r0
 80a0434:	4630      	mov	r0, r6
 80a0436:	f001 fa8a 	bl	80a194e <analogRead>
	for(int x = 0 ; x < numberOfReadings ; x++)
 80a043a:	3d01      	subs	r5, #1
		runningValue += analogRead(pinToRead);
 80a043c:	4404      	add	r4, r0
	for(int x = 0 ; x < numberOfReadings ; x++)
 80a043e:	d1f9      	bne.n	80a0434 <_Z17averageAnalogReadi+0x8>
	runningValue /= numberOfReadings;

	return(runningValue);
}
 80a0440:	08e0      	lsrs	r0, r4, #3
 80a0442:	bd70      	pop	{r4, r5, r6, pc}

080a0444 <_Z18get_wind_directionv>:

int get_wind_direction()
// read the wind direction sensor, return heading in degrees
{
 80a0444:	b538      	push	{r3, r4, r5, lr}
	unsigned int adc;

	adc = averageAnalogRead(WDIR); // get the current reading from the sensor
 80a0446:	200a      	movs	r0, #10
 80a0448:	f7ff fff0 	bl	80a042c <_Z17averageAnalogReadi>
 80a044c:	4604      	mov	r4, r0

	// The following table is ADC readings for the wind direction sensor output, sorted from low to high.
	// Each threshold is the midpoint between adjacent headings. The output is degrees for that ADC reading.
	// Note that these are not in compass degree order! See Weather Meters datasheet for more information.

  Serial.println( adc );
 80a044e:	f000 ffcb 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0452:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a0454:	220a      	movs	r2, #10
 80a0456:	4621      	mov	r1, r4
 80a0458:	f000 fd0d 	bl	80a0e76 <_ZN5Print11printNumberEmh>
        n += println();
 80a045c:	4628      	mov	r0, r5
 80a045e:	f000 fcf4 	bl	80a0e4a <_ZN5Print7printlnEv>
  return(adc);

}
 80a0462:	4620      	mov	r0, r4
 80a0464:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0468 <_Z10getWeatherv>:
{
 80a0468:	b510      	push	{r4, lr}
  humidity = sensor.getRH();
 80a046a:	4c0e      	ldr	r4, [pc, #56]	; (80a04a4 <_Z10getWeatherv+0x3c>)
 80a046c:	4620      	mov	r0, r4
 80a046e:	f000 f8a5 	bl	80a05bc <_ZN7Weather5getRHEv>
 80a0472:	4b0d      	ldr	r3, [pc, #52]	; (80a04a8 <_Z10getWeatherv+0x40>)
 80a0474:	6018      	str	r0, [r3, #0]
  tempf = sensor.getTempF();
 80a0476:	4620      	mov	r0, r4
 80a0478:	f000 f8e2 	bl	80a0640 <_ZN7Weather8getTempFEv>
 80a047c:	4b0b      	ldr	r3, [pc, #44]	; (80a04ac <_Z10getWeatherv+0x44>)
 80a047e:	6018      	str	r0, [r3, #0]
  baroTemp = sensor.readBaroTempF();
 80a0480:	4620      	mov	r0, r4
 80a0482:	f000 fa77 	bl	80a0974 <_ZN7Weather13readBaroTempFEv>
 80a0486:	4b0a      	ldr	r3, [pc, #40]	; (80a04b0 <_Z10getWeatherv+0x48>)
 80a0488:	6018      	str	r0, [r3, #0]
  pascals = sensor.readPressure();
 80a048a:	4620      	mov	r0, r4
 80a048c:	f000 f9b8 	bl	80a0800 <_ZN7Weather12readPressureEv>
 80a0490:	4b08      	ldr	r3, [pc, #32]	; (80a04b4 <_Z10getWeatherv+0x4c>)
 80a0492:	6018      	str	r0, [r3, #0]
  curr_wind_speed = get_wind_speed();
 80a0494:	f7ff ff60 	bl	80a0358 <_Z14get_wind_speedv>
 80a0498:	4b07      	ldr	r3, [pc, #28]	; (80a04b8 <_Z10getWeatherv+0x50>)
 80a049a:	6018      	str	r0, [r3, #0]
}
 80a049c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int wind_dir = get_wind_direction();
 80a04a0:	f7ff bfd0 	b.w	80a0444 <_Z18get_wind_directionv>
 80a04a4:	20000194 	.word	0x20000194
 80a04a8:	20000080 	.word	0x20000080
 80a04ac:	20000198 	.word	0x20000198
 80a04b0:	20000074 	.word	0x20000074
 80a04b4:	20000094 	.word	0x20000094
 80a04b8:	20000078 	.word	0x20000078

080a04bc <loop>:
{
 80a04bc:	b510      	push	{r4, lr}
      getWeather();
 80a04be:	f7ff ffd3 	bl	80a0468 <_Z10getWeatherv>
 80a04c2:	f000 faa9 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
      if(millis() - lastPrint > 5000) //Publishes every 5000 milliseconds, or 5 seconds
 80a04c6:	4c07      	ldr	r4, [pc, #28]	; (80a04e4 <loop+0x28>)
 80a04c8:	6823      	ldr	r3, [r4, #0]
 80a04ca:	1ac0      	subs	r0, r0, r3
 80a04cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80a04d0:	4298      	cmp	r0, r3
 80a04d2:	d906      	bls.n	80a04e2 <loop+0x26>
 80a04d4:	f000 faa0 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
        lastPrint = millis();
 80a04d8:	6020      	str	r0, [r4, #0]
}
 80a04da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printInfo();
 80a04de:	f7ff be9b 	b.w	80a0218 <_Z9printInfov>
}
 80a04e2:	bd10      	pop	{r4, pc}
 80a04e4:	20000084 	.word	0x20000084

080a04e8 <_GLOBAL__sub_I_humidity>:
Weather sensor;
 80a04e8:	4801      	ldr	r0, [pc, #4]	; (80a04f0 <_GLOBAL__sub_I_humidity+0x8>)
 80a04ea:	f000 b807 	b.w	80a04fc <_ZN7WeatherC1Ev>
 80a04ee:	bf00      	nop
 80a04f0:	20000194 	.word	0x20000194

080a04f4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a04f4:	6803      	ldr	r3, [r0, #0]
 80a04f6:	b2c9      	uxtb	r1, r1
 80a04f8:	689b      	ldr	r3, [r3, #8]
 80a04fa:	4718      	bx	r3

080a04fc <_ZN7WeatherC1Ev>:
 */

 #include "SparkFun_Photon_Weather_Shield_Library.h"

 //Initialize
 Weather::Weather(){}
 80a04fc:	4770      	bx	lr

080a04fe <_ZN7Weather7checkIDEv>:
	//Reset user resister
	writeReg(SOFT_RESET);
}

uint8_t Weather::checkID()
{
 80a04fe:	b508      	push	{r3, lr}
	uint8_t ID_1;

 	// Check device ID
	Wire.beginTransmission(ADDRESS);
 80a0500:	f001 fa6c 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0504:	2140      	movs	r1, #64	; 0x40
 80a0506:	f001 f8f1 	bl	80a16ec <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0xFC);
 80a050a:	f001 fa67 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a050e:	21fc      	movs	r1, #252	; 0xfc
 80a0510:	f7ff fff0 	bl	80a04f4 <_ZN7TwoWire5writeEi>
	Wire.write(0xC9);
 80a0514:	f001 fa62 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0518:	21c9      	movs	r1, #201	; 0xc9
 80a051a:	f7ff ffeb 	bl	80a04f4 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
 80a051e:	f001 fa5d 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0522:	f001 f8ea 	bl	80a16fa <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(ADDRESS,1);
 80a0526:	f001 fa59 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a052a:	2201      	movs	r2, #1
 80a052c:	2140      	movs	r1, #64	; 0x40
 80a052e:	f001 f8d6 	bl	80a16de <_ZN7TwoWire11requestFromEhj>

    ID_1 = Wire.read();
 80a0532:	f001 fa53 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0536:	6803      	ldr	r3, [r0, #0]
 80a0538:	695b      	ldr	r3, [r3, #20]
 80a053a:	4798      	blx	r3

    return(ID_1);
}
 80a053c:	b2c0      	uxtb	r0, r0
 80a053e:	bd08      	pop	{r3, pc}

080a0540 <_ZN7Weather14makeMeasurmentEh>:

uint16_t Weather::makeMeasurment(uint8_t command)
{
 80a0540:	b538      	push	{r3, r4, r5, lr}
	// It can be either temperature or relative humidity
	// TODO: implement checksum checking

	uint16_t nBytes = 3;
	// if we are only reading old temperature, read olny msb and lsb
	if (command == 0xE0) nBytes = 2;
 80a0542:	29e0      	cmp	r1, #224	; 0xe0
 80a0544:	bf14      	ite	ne
 80a0546:	2503      	movne	r5, #3
 80a0548:	2502      	moveq	r5, #2
{
 80a054a:	460c      	mov	r4, r1

	Wire.beginTransmission(ADDRESS);
 80a054c:	f001 fa46 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0550:	2140      	movs	r1, #64	; 0x40
 80a0552:	f001 f8cb 	bl	80a16ec <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(command);
 80a0556:	f001 fa41 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a055a:	6803      	ldr	r3, [r0, #0]
 80a055c:	4621      	mov	r1, r4
 80a055e:	689b      	ldr	r3, [r3, #8]
 80a0560:	4798      	blx	r3
	Wire.endTransmission();
 80a0562:	f001 fa3b 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0566:	f001 f8c8 	bl	80a16fa <_ZN7TwoWire15endTransmissionEv>
	// When not using clock stretching (*_NOHOLD commands) delay here
	// is needed to wait for the measurement.
	// According to datasheet the max. conversion time is ~22ms
	 delay(100);
 80a056a:	2064      	movs	r0, #100	; 0x64
 80a056c:	f000 fda8 	bl	80a10c0 <delay>

	Wire.requestFrom(ADDRESS,nBytes);
 80a0570:	f001 fa34 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0574:	462a      	mov	r2, r5
 80a0576:	2140      	movs	r1, #64	; 0x40
 80a0578:	f001 f8b1 	bl	80a16de <_ZN7TwoWire11requestFromEhj>
 80a057c:	2465      	movs	r4, #101	; 0x65
	//Wait for data
	int counter = 0;
	while (Wire.available() < nBytes){
 80a057e:	f001 fa2d 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0582:	6803      	ldr	r3, [r0, #0]
 80a0584:	691b      	ldr	r3, [r3, #16]
 80a0586:	4798      	blx	r3
 80a0588:	42a8      	cmp	r0, r5
 80a058a:	da06      	bge.n	80a059a <_ZN7Weather14makeMeasurmentEh+0x5a>
	  delay(1);
 80a058c:	2001      	movs	r0, #1
 80a058e:	f000 fd97 	bl	80a10c0 <delay>
	  counter ++;
	  if (counter >100){
 80a0592:	3c01      	subs	r4, #1
 80a0594:	d1f3      	bne.n	80a057e <_ZN7Weather14makeMeasurmentEh+0x3e>
	    // Timeout: Sensor did not return any data
	    return 100;
 80a0596:	2064      	movs	r0, #100	; 0x64
 80a0598:	e00f      	b.n	80a05ba <_ZN7Weather14makeMeasurmentEh+0x7a>
	  }
	}

	unsigned int msb = Wire.read();
 80a059a:	f001 fa1f 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a059e:	6803      	ldr	r3, [r0, #0]
 80a05a0:	695b      	ldr	r3, [r3, #20]
 80a05a2:	4798      	blx	r3
 80a05a4:	4604      	mov	r4, r0
	unsigned int lsb = Wire.read();
 80a05a6:	f001 fa19 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a05aa:	6803      	ldr	r3, [r0, #0]
 80a05ac:	695b      	ldr	r3, [r3, #20]
 80a05ae:	4798      	blx	r3
	// Clear the last to bits of LSB to 00.
	// According to datasheet LSB of RH is always xxxxxx10
	lsb &= 0xFC;
 80a05b0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	unsigned int mesurment = msb << 8 | lsb;
 80a05b4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

	return mesurment;
 80a05b8:	b280      	uxth	r0, r0
}
 80a05ba:	bd38      	pop	{r3, r4, r5, pc}

080a05bc <_ZN7Weather5getRHEv>:
{
 80a05bc:	b508      	push	{r3, lr}
	uint16_t RH_Code = makeMeasurment(HUMD_MEASURE_NOHOLD);
 80a05be:	21f5      	movs	r1, #245	; 0xf5
 80a05c0:	f7ff ffbe 	bl	80a0540 <_ZN7Weather14makeMeasurmentEh>
	float result = (125.0*RH_Code/65536)-6;
 80a05c4:	f001 fb8e 	bl	80a1ce4 <__aeabi_i2d>
 80a05c8:	2200      	movs	r2, #0
 80a05ca:	4b07      	ldr	r3, [pc, #28]	; (80a05e8 <_ZN7Weather5getRHEv+0x2c>)
 80a05cc:	f001 fbf4 	bl	80a1db8 <__aeabi_dmul>
 80a05d0:	2200      	movs	r2, #0
 80a05d2:	4b06      	ldr	r3, [pc, #24]	; (80a05ec <_ZN7Weather5getRHEv+0x30>)
 80a05d4:	f001 fbf0 	bl	80a1db8 <__aeabi_dmul>
 80a05d8:	2200      	movs	r2, #0
 80a05da:	4b05      	ldr	r3, [pc, #20]	; (80a05f0 <_ZN7Weather5getRHEv+0x34>)
 80a05dc:	f001 fa34 	bl	80a1a48 <__aeabi_dsub>
 80a05e0:	f001 fee2 	bl	80a23a8 <__aeabi_d2f>
}
 80a05e4:	bd08      	pop	{r3, pc}
 80a05e6:	bf00      	nop
 80a05e8:	405f4000 	.word	0x405f4000
 80a05ec:	3ef00000 	.word	0x3ef00000
 80a05f0:	40180000 	.word	0x40180000
 80a05f4:	00000000 	.word	0x00000000

080a05f8 <_ZN7Weather7getTempEv>:
{
 80a05f8:	b508      	push	{r3, lr}
	uint16_t temp_Code = makeMeasurment(TEMP_MEASURE_NOHOLD);
 80a05fa:	21f3      	movs	r1, #243	; 0xf3
 80a05fc:	f7ff ffa0 	bl	80a0540 <_ZN7Weather14makeMeasurmentEh>
	float result = (175.72*temp_Code/65536)-46.85;
 80a0600:	f001 fb70 	bl	80a1ce4 <__aeabi_i2d>
 80a0604:	a308      	add	r3, pc, #32	; (adr r3, 80a0628 <_ZN7Weather7getTempEv+0x30>)
 80a0606:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a060a:	f001 fbd5 	bl	80a1db8 <__aeabi_dmul>
 80a060e:	2200      	movs	r2, #0
 80a0610:	4b09      	ldr	r3, [pc, #36]	; (80a0638 <_ZN7Weather7getTempEv+0x40>)
 80a0612:	f001 fbd1 	bl	80a1db8 <__aeabi_dmul>
 80a0616:	a306      	add	r3, pc, #24	; (adr r3, 80a0630 <_ZN7Weather7getTempEv+0x38>)
 80a0618:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a061c:	f001 fa14 	bl	80a1a48 <__aeabi_dsub>
 80a0620:	f001 fec2 	bl	80a23a8 <__aeabi_d2f>
}
 80a0624:	bd08      	pop	{r3, pc}
 80a0626:	bf00      	nop
 80a0628:	3d70a3d7 	.word	0x3d70a3d7
 80a062c:	4065f70a 	.word	0x4065f70a
 80a0630:	cccccccd 	.word	0xcccccccd
 80a0634:	40476ccc 	.word	0x40476ccc
 80a0638:	3ef00000 	.word	0x3ef00000
 80a063c:	00000000 	.word	0x00000000

080a0640 <_ZN7Weather8getTempFEv>:
{
 80a0640:	b508      	push	{r3, lr}
  return((getTemp() * 1.8) + 32.0); // Convert celsius to fahrenheit
 80a0642:	f7ff ffd9 	bl	80a05f8 <_ZN7Weather7getTempEv>
 80a0646:	f001 fb5f 	bl	80a1d08 <__aeabi_f2d>
 80a064a:	a307      	add	r3, pc, #28	; (adr r3, 80a0668 <_ZN7Weather8getTempFEv+0x28>)
 80a064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0650:	f001 fbb2 	bl	80a1db8 <__aeabi_dmul>
 80a0654:	2200      	movs	r2, #0
 80a0656:	4b06      	ldr	r3, [pc, #24]	; (80a0670 <_ZN7Weather8getTempFEv+0x30>)
 80a0658:	f001 f9f8 	bl	80a1a4c <__adddf3>
 80a065c:	f001 fea4 	bl	80a23a8 <__aeabi_d2f>
}
 80a0660:	bd08      	pop	{r3, pc}
 80a0662:	bf00      	nop
 80a0664:	f3af 8000 	nop.w
 80a0668:	cccccccd 	.word	0xcccccccd
 80a066c:	3ffccccc 	.word	0x3ffccccc
 80a0670:	40400000 	.word	0x40400000

080a0674 <_ZN7Weather8IIC_ReadEh>:
}


// These are the two I2C functions in this sketch.
byte Weather::IIC_Read(byte regAddr)
{
 80a0674:	b510      	push	{r4, lr}
 80a0676:	460c      	mov	r4, r1
  // This function reads one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0678:	f001 f9b0 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a067c:	2160      	movs	r1, #96	; 0x60
 80a067e:	f001 f835 	bl	80a16ec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);  // Address of CTRL_REG1
 80a0682:	f001 f9ab 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0686:	6803      	ldr	r3, [r0, #0]
 80a0688:	4621      	mov	r1, r4
 80a068a:	689b      	ldr	r3, [r3, #8]
 80a068c:	4798      	blx	r3
  Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
 80a068e:	f001 f9a5 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0692:	2100      	movs	r1, #0
 80a0694:	f001 f82d 	bl	80a16f2 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPL3115A2_ADDRESS, 1); // Request the data...
 80a0698:	f001 f9a0 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a069c:	2201      	movs	r2, #1
 80a069e:	2160      	movs	r1, #96	; 0x60
 80a06a0:	f001 f81d 	bl	80a16de <_ZN7TwoWire11requestFromEhj>
  return Wire.read();
 80a06a4:	f001 f99a 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a06a8:	6803      	ldr	r3, [r0, #0]
 80a06aa:	695b      	ldr	r3, [r3, #20]
 80a06ac:	4798      	blx	r3
}
 80a06ae:	b2c0      	uxtb	r0, r0
 80a06b0:	bd10      	pop	{r4, pc}
	...

080a06b4 <_ZN7Weather5beginEv>:
{
 80a06b4:	b538      	push	{r3, r4, r5, lr}
 80a06b6:	4605      	mov	r5, r0
  Wire.begin();
 80a06b8:	f001 f990 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a06bc:	f000 ffe0 	bl	80a1680 <_ZN7TwoWire5beginEv>
  uint8_t ID_Barro = IIC_Read(WHO_AM_I );
 80a06c0:	210c      	movs	r1, #12
 80a06c2:	4628      	mov	r0, r5
 80a06c4:	f7ff ffd6 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
 80a06c8:	4604      	mov	r4, r0
  uint8_t ID_Temp_Hum = checkID();
 80a06ca:	4628      	mov	r0, r5
 80a06cc:	f7ff ff17 	bl	80a04fe <_ZN7Weather7checkIDEv>
  if(ID_Temp_Hum == 0x15)//Ping CheckID register
 80a06d0:	2815      	cmp	r0, #21
 80a06d2:	d018      	beq.n	80a0706 <_ZN7Weather5beginEv+0x52>
  else if(ID_Temp_Hum == 0x32)
 80a06d4:	2832      	cmp	r0, #50	; 0x32
 80a06d6:	d124      	bne.n	80a0722 <_ZN7Weather5beginEv+0x6e>
  if(x == 1 && y == 1)
 80a06d8:	2cc4      	cmp	r4, #196	; 0xc4
 80a06da:	d003      	beq.n	80a06e4 <_ZN7Weather5beginEv+0x30>
    Serial.println("MPL3115A2 NOT Found");
 80a06dc:	f000 fe84 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a06e0:	4915      	ldr	r1, [pc, #84]	; (80a0738 <_ZN7Weather5beginEv+0x84>)
 80a06e2:	e002      	b.n	80a06ea <_ZN7Weather5beginEv+0x36>
    Serial.println("MPL3115A2 Found");
 80a06e4:	f000 fe80 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a06e8:	4914      	ldr	r1, [pc, #80]	; (80a073c <_ZN7Weather5beginEv+0x88>)
    Serial.println("MPL3115A2 NOT Found");
 80a06ea:	f000 fbba 	bl	80a0e62 <_ZN5Print7printlnEPKc>
    Serial.println("HTU21D Found");
 80a06ee:	f000 fe7b 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a06f2:	4913      	ldr	r1, [pc, #76]	; (80a0740 <_ZN7Weather5beginEv+0x8c>)
 80a06f4:	e011      	b.n	80a071a <_ZN7Weather5beginEv+0x66>
    Serial.println("MPL3115A2 NOT Found");
 80a06f6:	f000 fe77 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a06fa:	490f      	ldr	r1, [pc, #60]	; (80a0738 <_ZN7Weather5beginEv+0x84>)
 80a06fc:	e008      	b.n	80a0710 <_ZN7Weather5beginEv+0x5c>
  	Serial.println("No Devices Detected");
 80a06fe:	f000 fe73 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0702:	4910      	ldr	r1, [pc, #64]	; (80a0744 <_ZN7Weather5beginEv+0x90>)
 80a0704:	e009      	b.n	80a071a <_ZN7Weather5beginEv+0x66>
  if(x == 1 && y == 1)
 80a0706:	2cc4      	cmp	r4, #196	; 0xc4
 80a0708:	d1f5      	bne.n	80a06f6 <_ZN7Weather5beginEv+0x42>
    Serial.println("MPL3115A2 Found");
 80a070a:	f000 fe6d 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a070e:	490b      	ldr	r1, [pc, #44]	; (80a073c <_ZN7Weather5beginEv+0x88>)
    Serial.println("MPL3115A2 NOT Found");
 80a0710:	f000 fba7 	bl	80a0e62 <_ZN5Print7printlnEPKc>
    Serial.println("Si7021 Found");
 80a0714:	f000 fe68 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0718:	490b      	ldr	r1, [pc, #44]	; (80a0748 <_ZN7Weather5beginEv+0x94>)
}
 80a071a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  	Serial.println("No Devices Detected");
 80a071e:	f000 bba0 	b.w	80a0e62 <_ZN5Print7printlnEPKc>
  if(x == 1 && y == 1)
 80a0722:	2cc4      	cmp	r4, #196	; 0xc4
 80a0724:	d1eb      	bne.n	80a06fe <_ZN7Weather5beginEv+0x4a>
    Serial.println("MPL3115A2 Found");
 80a0726:	f000 fe5f 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a072a:	4904      	ldr	r1, [pc, #16]	; (80a073c <_ZN7Weather5beginEv+0x88>)
 80a072c:	f000 fb99 	bl	80a0e62 <_ZN5Print7printlnEPKc>
    Serial.println("No Temp/Humidity Device Detected");
 80a0730:	f000 fe5a 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a0734:	4905      	ldr	r1, [pc, #20]	; (80a074c <_ZN7Weather5beginEv+0x98>)
 80a0736:	e7f0      	b.n	80a071a <_ZN7Weather5beginEv+0x66>
 80a0738:	080a2a56 	.word	0x080a2a56
 80a073c:	080a2a2c 	.word	0x080a2a2c
 80a0740:	080a2a49 	.word	0x080a2a49
 80a0744:	080a2a8b 	.word	0x080a2a8b
 80a0748:	080a2a3c 	.word	0x080a2a3c
 80a074c:	080a2a6a 	.word	0x080a2a6a

080a0750 <_ZN7Weather9IIC_WriteEhh>:

void Weather::IIC_Write(byte regAddr, byte value)
{
 80a0750:	b538      	push	{r3, r4, r5, lr}
 80a0752:	4614      	mov	r4, r2
 80a0754:	460d      	mov	r5, r1
  // This function writes one byte over IIC
  Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0756:	f001 f941 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a075a:	2160      	movs	r1, #96	; 0x60
 80a075c:	f000 ffc6 	bl	80a16ec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(regAddr);
 80a0760:	f001 f93c 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0764:	6803      	ldr	r3, [r0, #0]
 80a0766:	4629      	mov	r1, r5
 80a0768:	689b      	ldr	r3, [r3, #8]
 80a076a:	4798      	blx	r3
  Wire.write(value);
 80a076c:	f001 f936 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0770:	6803      	ldr	r3, [r0, #0]
 80a0772:	4621      	mov	r1, r4
 80a0774:	689b      	ldr	r3, [r3, #8]
 80a0776:	4798      	blx	r3
  Wire.endTransmission(true);
 80a0778:	f001 f930 	bl	80a19dc <_Z19__fetch_global_Wirev>
}
 80a077c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission(true);
 80a0780:	2101      	movs	r1, #1
 80a0782:	f000 bfb6 	b.w	80a16f2 <_ZN7TwoWire15endTransmissionEh>

080a0786 <_ZN7Weather16setModeBarometerEv>:
{
 80a0786:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a0788:	2126      	movs	r1, #38	; 0x26
{
 80a078a:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a078c:	f7ff ff72 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
 80a0790:	2126      	movs	r1, #38	; 0x26
 80a0792:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80a0796:	4620      	mov	r0, r4
}
 80a0798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
 80a079c:	f7ff bfd8 	b.w	80a0750 <_ZN7Weather9IIC_WriteEhh>

080a07a0 <_ZN7Weather17setOversampleRateEh>:
  if(sampleRate > 7) sampleRate = 7; //OS cannot be larger than 0b.0111
 80a07a0:	2907      	cmp	r1, #7
 80a07a2:	bf28      	it	cs
 80a07a4:	2107      	movcs	r1, #7
{
 80a07a6:	b538      	push	{r3, r4, r5, lr}
 80a07a8:	460d      	mov	r5, r1
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a07aa:	2126      	movs	r1, #38	; 0x26
{
 80a07ac:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a07ae:	f7ff ff61 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
  tempSetting &= 0b11000111; //Clear out old OS bits
 80a07b2:	f000 02c7 	and.w	r2, r0, #199	; 0xc7
  tempSetting |= sampleRate; //Mask in new OS bits
 80a07b6:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  IIC_Write(CTRL_REG1, tempSetting);
 80a07ba:	4620      	mov	r0, r4
}
 80a07bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IIC_Write(CTRL_REG1, tempSetting);
 80a07c0:	2126      	movs	r1, #38	; 0x26
 80a07c2:	b2d2      	uxtb	r2, r2
 80a07c4:	f7ff bfc4 	b.w	80a0750 <_ZN7Weather9IIC_WriteEhh>

080a07c8 <_ZN7Weather16enableEventFlagsEv>:
  IIC_Write(PT_DATA_CFG, 0x07); // Enable all three pressure and temp event flags
 80a07c8:	2207      	movs	r2, #7
 80a07ca:	2113      	movs	r1, #19
 80a07cc:	f7ff bfc0 	b.w	80a0750 <_ZN7Weather9IIC_WriteEhh>

080a07d0 <_ZN7Weather13toggleOneShotEv>:
{
 80a07d0:	b510      	push	{r4, lr}
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a07d2:	2126      	movs	r1, #38	; 0x26
{
 80a07d4:	4604      	mov	r4, r0
  byte tempSetting = IIC_Read(CTRL_REG1); //Read current settings
 80a07d6:	f7ff ff4d 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
  IIC_Write(CTRL_REG1, tempSetting);
 80a07da:	2126      	movs	r1, #38	; 0x26
 80a07dc:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
 80a07e0:	4620      	mov	r0, r4
 80a07e2:	f7ff ffb5 	bl	80a0750 <_ZN7Weather9IIC_WriteEhh>
  tempSetting = IIC_Read(CTRL_REG1); //Read current settings to be safe
 80a07e6:	2126      	movs	r1, #38	; 0x26
 80a07e8:	4620      	mov	r0, r4
 80a07ea:	f7ff ff43 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
  tempSetting |= (1<<1); //Set OST bit
 80a07ee:	f040 0202 	orr.w	r2, r0, #2
  IIC_Write(CTRL_REG1, tempSetting);
 80a07f2:	2126      	movs	r1, #38	; 0x26
 80a07f4:	4620      	mov	r0, r4
}
 80a07f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IIC_Write(CTRL_REG1, tempSetting);
 80a07fa:	b2d2      	uxtb	r2, r2
 80a07fc:	f7ff bfa8 	b.w	80a0750 <_ZN7Weather9IIC_WriteEhh>

080a0800 <_ZN7Weather12readPressureEv>:
{
 80a0800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0804:	4680      	mov	r8, r0
	if(IIC_Read(STATUS) & (1<<2) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a0806:	2100      	movs	r1, #0
 80a0808:	f7ff ff34 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
	while(IIC_Read(STATUS) & (1<<2) == 0)
 80a080c:	2100      	movs	r1, #0
 80a080e:	4640      	mov	r0, r8
 80a0810:	f7ff ff30 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
	Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a0814:	f001 f8e2 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0818:	2160      	movs	r1, #96	; 0x60
 80a081a:	f000 ff67 	bl	80a16ec <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_P_MSB);  // Address of data to get
 80a081e:	f001 f8dd 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0822:	2101      	movs	r1, #1
 80a0824:	f7ff fe66 	bl	80a04f4 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
 80a0828:	f001 f8d8 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a082c:	2100      	movs	r1, #0
 80a082e:	f000 ff60 	bl	80a16f2 <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 3) != 3) { // Request three bytes
 80a0832:	f001 f8d3 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0836:	2203      	movs	r2, #3
 80a0838:	2160      	movs	r1, #96	; 0x60
 80a083a:	f000 ff50 	bl	80a16de <_ZN7TwoWire11requestFromEhj>
 80a083e:	2803      	cmp	r0, #3
 80a0840:	d12d      	bne.n	80a089e <_ZN7Weather12readPressureEv+0x9e>
	msb = Wire.read();
 80a0842:	f001 f8cb 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0846:	6803      	ldr	r3, [r0, #0]
 80a0848:	695b      	ldr	r3, [r3, #20]
 80a084a:	4798      	blx	r3
 80a084c:	4604      	mov	r4, r0
	csb = Wire.read();
 80a084e:	f001 f8c5 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0852:	6803      	ldr	r3, [r0, #0]
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
 80a0854:	0424      	lsls	r4, r4, #16
	csb = Wire.read();
 80a0856:	695b      	ldr	r3, [r3, #20]
 80a0858:	4798      	blx	r3
 80a085a:	4606      	mov	r6, r0
	lsb = Wire.read();
 80a085c:	f001 f8be 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0860:	6803      	ldr	r3, [r0, #0]
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
 80a0862:	0236      	lsls	r6, r6, #8
	lsb = Wire.read();
 80a0864:	695b      	ldr	r3, [r3, #20]
 80a0866:	4798      	blx	r3
 80a0868:	b2c7      	uxtb	r7, r0
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a086a:	4640      	mov	r0, r8
 80a086c:	f7ff ffb0 	bl	80a07d0 <_ZN7Weather13toggleOneShotEv>
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
 80a0870:	f3c7 1001 	ubfx	r0, r7, #4, #2
 80a0874:	f001 fe9e 	bl	80a25b4 <__aeabi_ui2f>
 80a0878:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a087c:	f001 fef2 	bl	80a2664 <__aeabi_fmul>
	long pressure_whole = (long)msb<<16 | (long)csb<<8 | (long)lsb;
 80a0880:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80a0884:	b2b6      	uxth	r6, r6
 80a0886:	4334      	orrs	r4, r6
 80a0888:	433c      	orrs	r4, r7
	float pressure_decimal = (float)lsb/4.0; //Turn it into fraction
 80a088a:	4605      	mov	r5, r0
	float pressure = (float)pressure_whole + pressure_decimal;
 80a088c:	09a0      	lsrs	r0, r4, #6
 80a088e:	f001 fe95 	bl	80a25bc <__aeabi_i2f>
 80a0892:	4601      	mov	r1, r0
 80a0894:	4628      	mov	r0, r5
 80a0896:	f001 fddd 	bl	80a2454 <__addsf3>
}
 80a089a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -999;
 80a089e:	4801      	ldr	r0, [pc, #4]	; (80a08a4 <_ZN7Weather12readPressureEv+0xa4>)
 80a08a0:	e7fb      	b.n	80a089a <_ZN7Weather12readPressureEv+0x9a>
 80a08a2:	bf00      	nop
 80a08a4:	c479c000 	.word	0xc479c000

080a08a8 <_ZN7Weather12readBaroTempEv>:
{
 80a08a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(IIC_Read(STATUS) & (1<<1) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a08aa:	2100      	movs	r1, #0
{
 80a08ac:	4606      	mov	r6, r0
	if(IIC_Read(STATUS) & (1<<1) == 0) toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a08ae:	f240 2459 	movw	r4, #601	; 0x259
 80a08b2:	f7ff fedf 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
	while( (IIC_Read(STATUS) & (1<<1)) == 0)
 80a08b6:	2100      	movs	r1, #0
 80a08b8:	4630      	mov	r0, r6
 80a08ba:	f7ff fedb 	bl	80a0674 <_ZN7Weather8IIC_ReadEh>
 80a08be:	0782      	lsls	r2, r0, #30
 80a08c0:	d407      	bmi.n	80a08d2 <_ZN7Weather12readBaroTempEv+0x2a>
		if(++counter > 600) return(-999); //Error out after max of 512ms for a read
 80a08c2:	3c01      	subs	r4, #1
 80a08c4:	d101      	bne.n	80a08ca <_ZN7Weather12readBaroTempEv+0x22>
 80a08c6:	4829      	ldr	r0, [pc, #164]	; (80a096c <_ZN7Weather12readBaroTempEv+0xc4>)
}
 80a08c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delay(1);
 80a08ca:	2001      	movs	r0, #1
 80a08cc:	f000 fbf8 	bl	80a10c0 <delay>
	while( (IIC_Read(STATUS) & (1<<1)) == 0)
 80a08d0:	e7f1      	b.n	80a08b6 <_ZN7Weather12readBaroTempEv+0xe>
	Wire.beginTransmission(MPL3115A2_ADDRESS);
 80a08d2:	f001 f883 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a08d6:	2160      	movs	r1, #96	; 0x60
 80a08d8:	f000 ff08 	bl	80a16ec <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(OUT_T_MSB);  // Address of data to get
 80a08dc:	f001 f87e 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a08e0:	2104      	movs	r1, #4
 80a08e2:	f7ff fe07 	bl	80a04f4 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(false); // Send data to I2C dev with option for a repeated start. THIS IS NECESSARY and not supported before Arduino V1.0.1!
 80a08e6:	f001 f879 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a08ea:	2100      	movs	r1, #0
 80a08ec:	f000 ff01 	bl	80a16f2 <_ZN7TwoWire15endTransmissionEh>
	if (Wire.requestFrom(MPL3115A2_ADDRESS, 2) != 2) { // Request two bytes
 80a08f0:	f001 f874 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a08f4:	2202      	movs	r2, #2
 80a08f6:	2160      	movs	r1, #96	; 0x60
 80a08f8:	f000 fef1 	bl	80a16de <_ZN7TwoWire11requestFromEhj>
 80a08fc:	2802      	cmp	r0, #2
 80a08fe:	d1e2      	bne.n	80a08c6 <_ZN7Weather12readBaroTempEv+0x1e>
	msb = Wire.read();
 80a0900:	f001 f86c 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0904:	6803      	ldr	r3, [r0, #0]
 80a0906:	695b      	ldr	r3, [r3, #20]
 80a0908:	4798      	blx	r3
 80a090a:	b2c7      	uxtb	r7, r0
 80a090c:	4605      	mov	r5, r0
	lsb = Wire.read();
 80a090e:	f001 f865 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a0912:	6803      	ldr	r3, [r0, #0]
 80a0914:	695b      	ldr	r3, [r3, #20]
 80a0916:	4798      	blx	r3
 80a0918:	b2c4      	uxtb	r4, r0
	toggleOneShot(); //Toggle the OST bit causing the sensor to immediately take another reading
 80a091a:	4630      	mov	r0, r6
 80a091c:	f7ff ff58 	bl	80a07d0 <_ZN7Weather13toggleOneShotEv>
	if(msb > 0x7F)
 80a0920:	062b      	lsls	r3, r5, #24
        foo = ~((msb << 8) + lsb) + 1;  //2’s complement
 80a0922:	bf41      	itttt	mi
 80a0924:	eb04 2407 	addmi.w	r4, r4, r7, lsl #8
 80a0928:	4264      	negmi	r4, r4
        msb = foo >> 8;
 80a092a:	f3c4 2707 	ubfxmi	r7, r4, #8, #8
        lsb = foo & 0x00F0;
 80a092e:	f004 04f0 	andmi.w	r4, r4, #240	; 0xf0
	float templsb = (lsb>>4)/16.0; //temp, fraction of a degree
 80a0932:	ea4f 1014 	mov.w	r0, r4, lsr #4
        negSign = true;
 80a0936:	bf4c      	ite	mi
 80a0938:	2601      	movmi	r6, #1
    bool negSign = false;
 80a093a:	2600      	movpl	r6, #0
	float templsb = (lsb>>4)/16.0; //temp, fraction of a degree
 80a093c:	f001 f9d2 	bl	80a1ce4 <__aeabi_i2d>
 80a0940:	2200      	movs	r2, #0
 80a0942:	4b0b      	ldr	r3, [pc, #44]	; (80a0970 <_ZN7Weather12readBaroTempEv+0xc8>)
 80a0944:	f001 fa38 	bl	80a1db8 <__aeabi_dmul>
 80a0948:	f001 fd2e 	bl	80a23a8 <__aeabi_d2f>
 80a094c:	4605      	mov	r5, r0
	float temperature = (float)(msb + templsb);
 80a094e:	4638      	mov	r0, r7
 80a0950:	f001 fe34 	bl	80a25bc <__aeabi_i2f>
 80a0954:	4601      	mov	r1, r0
 80a0956:	4628      	mov	r0, r5
 80a0958:	f001 fd7c 	bl	80a2454 <__addsf3>
	if (negSign) temperature = 0 - temperature;
 80a095c:	2e00      	cmp	r6, #0
 80a095e:	d0b3      	beq.n	80a08c8 <_ZN7Weather12readBaroTempEv+0x20>
 80a0960:	4601      	mov	r1, r0
 80a0962:	2000      	movs	r0, #0
 80a0964:	f001 fd74 	bl	80a2450 <__aeabi_fsub>
 80a0968:	e7ae      	b.n	80a08c8 <_ZN7Weather12readBaroTempEv+0x20>
 80a096a:	bf00      	nop
 80a096c:	c479c000 	.word	0xc479c000
 80a0970:	3fb00000 	.word	0x3fb00000

080a0974 <_ZN7Weather13readBaroTempFEv>:
{
 80a0974:	b508      	push	{r3, lr}
  return((readBaroTemp() * 9.0)/ 5.0 + 32.0); // Convert celsius to fahrenheit
 80a0976:	f7ff ff97 	bl	80a08a8 <_ZN7Weather12readBaroTempEv>
 80a097a:	f001 f9c5 	bl	80a1d08 <__aeabi_f2d>
 80a097e:	2200      	movs	r2, #0
 80a0980:	4b06      	ldr	r3, [pc, #24]	; (80a099c <_ZN7Weather13readBaroTempFEv+0x28>)
 80a0982:	f001 fa19 	bl	80a1db8 <__aeabi_dmul>
 80a0986:	2200      	movs	r2, #0
 80a0988:	4b05      	ldr	r3, [pc, #20]	; (80a09a0 <_ZN7Weather13readBaroTempFEv+0x2c>)
 80a098a:	f001 fb3f 	bl	80a200c <__aeabi_ddiv>
 80a098e:	2200      	movs	r2, #0
 80a0990:	4b04      	ldr	r3, [pc, #16]	; (80a09a4 <_ZN7Weather13readBaroTempFEv+0x30>)
 80a0992:	f001 f85b 	bl	80a1a4c <__adddf3>
 80a0996:	f001 fd07 	bl	80a23a8 <__aeabi_d2f>
}
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	40220000 	.word	0x40220000
 80a09a0:	40140000 	.word	0x40140000
 80a09a4:	40400000 	.word	0x40400000

080a09a8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <HAL_Validate_Pin_Function+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	685b      	ldr	r3, [r3, #4]
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601b0 	.word	0x080601b0

080a09b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <HAL_Pin_Mode+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	689b      	ldr	r3, [r3, #8]
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601b0 	.word	0x080601b0

080a09c8 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <HAL_Interrupts_Attach+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	699b      	ldr	r3, [r3, #24]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601b0 	.word	0x080601b0

080a09d8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <HAL_Interrupts_Detach+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	69db      	ldr	r3, [r3, #28]
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601b0 	.word	0x080601b0

080a09e8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <HAL_Interrupts_Enable_All+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	6a1b      	ldr	r3, [r3, #32]
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601b0 	.word	0x080601b0

080a09f8 <hal_adc_read>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <hal_adc_read+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601b0 	.word	0x080601b0

080a0a08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <HAL_RNG_GetRandomNumber+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	685b      	ldr	r3, [r3, #4]
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	0806019c 	.word	0x0806019c

080a0a18 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	695b      	ldr	r3, [r3, #20]
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	0806019c 	.word	0x0806019c

080a0a28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <os_mutex_recursive_create+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601d0 	.word	0x080601d0

080a0a38 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <os_mutex_recursive_destroy+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601d0 	.word	0x080601d0

080a0a48 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <hal_usart_init+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	699b      	ldr	r3, [r3, #24]
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601c4 	.word	0x080601c4

080a0a58 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <hal_usart_write+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601c4 	.word	0x080601c4

080a0a68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <hal_usart_available+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601c4 	.word	0x080601c4

080a0a78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <hal_usart_read+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601c4 	.word	0x080601c4

080a0a88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <hal_usart_peek+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601c4 	.word	0x080601c4

080a0a98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <hal_usart_flush+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601c4 	.word	0x080601c4

080a0aa8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <hal_usart_is_enabled+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601c4 	.word	0x080601c4

080a0ab8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <hal_usart_available_data_for_write+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601c4 	.word	0x080601c4

080a0ac8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <hal_i2c_begin+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601ac 	.word	0x080601ac

080a0ad8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <hal_i2c_begin_transmission+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601ac 	.word	0x080601ac

080a0ae8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <hal_i2c_end_transmission+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601ac 	.word	0x080601ac

080a0af8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <hal_i2c_write+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601ac 	.word	0x080601ac

080a0b08 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <hal_i2c_available+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601ac 	.word	0x080601ac

080a0b18 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <hal_i2c_read+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601ac 	.word	0x080601ac

080a0b28 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <hal_i2c_peek+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601ac 	.word	0x080601ac

080a0b38 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <hal_i2c_flush+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601ac 	.word	0x080601ac

080a0b48 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b02      	ldr	r3, [pc, #8]	; (80a0b54 <hal_i2c_is_enabled+0xc>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0b50:	9301      	str	r3, [sp, #4]
 80a0b52:	bd08      	pop	{r3, pc}
 80a0b54:	080601ac 	.word	0x080601ac

080a0b58 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0b58:	b508      	push	{r3, lr}
 80a0b5a:	4b03      	ldr	r3, [pc, #12]	; (80a0b68 <hal_i2c_init+0x10>)
 80a0b5c:	681b      	ldr	r3, [r3, #0]
 80a0b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0b62:	9301      	str	r3, [sp, #4]
 80a0b64:	bd08      	pop	{r3, pc}
 80a0b66:	0000      	.short	0x0000
 80a0b68:	080601ac 	.word	0x080601ac

080a0b6c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b03      	ldr	r3, [pc, #12]	; (80a0b7c <hal_i2c_request_ex+0x10>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0b76:	9301      	str	r3, [sp, #4]
 80a0b78:	bd08      	pop	{r3, pc}
 80a0b7a:	0000      	.short	0x0000
 80a0b7c:	080601ac 	.word	0x080601ac

080a0b80 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <hal_spi_init+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	69db      	ldr	r3, [r3, #28]
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601b4 	.word	0x080601b4

080a0b90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <hal_spi_is_enabled+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	6a1b      	ldr	r3, [r3, #32]
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601b4 	.word	0x080601b4

080a0ba0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <HAL_USB_USART_Init+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	681b      	ldr	r3, [r3, #0]
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601d8 	.word	0x080601d8

080a0bb0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <HAL_USB_USART_Begin+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	685b      	ldr	r3, [r3, #4]
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601d8 	.word	0x080601d8

080a0bc0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <HAL_USB_USART_Available_Data+0xc>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	691b      	ldr	r3, [r3, #16]
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	bd08      	pop	{r3, pc}
 80a0bcc:	080601d8 	.word	0x080601d8

080a0bd0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0bd0:	b508      	push	{r3, lr}
 80a0bd2:	4b02      	ldr	r3, [pc, #8]	; (80a0bdc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0bd4:	681b      	ldr	r3, [r3, #0]
 80a0bd6:	695b      	ldr	r3, [r3, #20]
 80a0bd8:	9301      	str	r3, [sp, #4]
 80a0bda:	bd08      	pop	{r3, pc}
 80a0bdc:	080601d8 	.word	0x080601d8

080a0be0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0be0:	b508      	push	{r3, lr}
 80a0be2:	4b02      	ldr	r3, [pc, #8]	; (80a0bec <HAL_USB_USART_Receive_Data+0xc>)
 80a0be4:	681b      	ldr	r3, [r3, #0]
 80a0be6:	699b      	ldr	r3, [r3, #24]
 80a0be8:	9301      	str	r3, [sp, #4]
 80a0bea:	bd08      	pop	{r3, pc}
 80a0bec:	080601d8 	.word	0x080601d8

080a0bf0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0bf0:	b508      	push	{r3, lr}
 80a0bf2:	4b02      	ldr	r3, [pc, #8]	; (80a0bfc <HAL_USB_USART_Send_Data+0xc>)
 80a0bf4:	681b      	ldr	r3, [r3, #0]
 80a0bf6:	69db      	ldr	r3, [r3, #28]
 80a0bf8:	9301      	str	r3, [sp, #4]
 80a0bfa:	bd08      	pop	{r3, pc}
 80a0bfc:	080601d8 	.word	0x080601d8

080a0c00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0c00:	b508      	push	{r3, lr}
 80a0c02:	4b02      	ldr	r3, [pc, #8]	; (80a0c0c <HAL_USB_USART_Flush_Data+0xc>)
 80a0c04:	681b      	ldr	r3, [r3, #0]
 80a0c06:	6a1b      	ldr	r3, [r3, #32]
 80a0c08:	9301      	str	r3, [sp, #4]
 80a0c0a:	bd08      	pop	{r3, pc}
 80a0c0c:	080601d8 	.word	0x080601d8

080a0c10 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0c10:	b508      	push	{r3, lr}
 80a0c12:	4b02      	ldr	r3, [pc, #8]	; (80a0c1c <inet_gethostbyname+0xc>)
 80a0c14:	681b      	ldr	r3, [r3, #0]
 80a0c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c18:	9301      	str	r3, [sp, #4]
 80a0c1a:	bd08      	pop	{r3, pc}
 80a0c1c:	080601c0 	.word	0x080601c0

080a0c20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0c20:	b508      	push	{r3, lr}
 80a0c22:	4b02      	ldr	r3, [pc, #8]	; (80a0c2c <set_system_mode+0xc>)
 80a0c24:	681b      	ldr	r3, [r3, #0]
 80a0c26:	685b      	ldr	r3, [r3, #4]
 80a0c28:	9301      	str	r3, [sp, #4]
 80a0c2a:	bd08      	pop	{r3, pc}
 80a0c2c:	080601a4 	.word	0x080601a4

080a0c30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0c30:	b508      	push	{r3, lr}
 80a0c32:	4b02      	ldr	r3, [pc, #8]	; (80a0c3c <system_delay_ms+0xc>)
 80a0c34:	681b      	ldr	r3, [r3, #0]
 80a0c36:	695b      	ldr	r3, [r3, #20]
 80a0c38:	9301      	str	r3, [sp, #4]
 80a0c3a:	bd08      	pop	{r3, pc}
 80a0c3c:	080601a4 	.word	0x080601a4

080a0c40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0c40:	b508      	push	{r3, lr}
 80a0c42:	4b03      	ldr	r3, [pc, #12]	; (80a0c50 <system_ctrl_set_app_request_handler+0x10>)
 80a0c44:	681b      	ldr	r3, [r3, #0]
 80a0c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0c4a:	9301      	str	r3, [sp, #4]
 80a0c4c:	bd08      	pop	{r3, pc}
 80a0c4e:	0000      	.short	0x0000
 80a0c50:	080601a4 	.word	0x080601a4

080a0c54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b03      	ldr	r3, [pc, #12]	; (80a0c64 <system_ctrl_set_result+0x10>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0c5e:	9301      	str	r3, [sp, #4]
 80a0c60:	bd08      	pop	{r3, pc}
 80a0c62:	0000      	.short	0x0000
 80a0c64:	080601a4 	.word	0x080601a4

080a0c68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0c68:	b508      	push	{r3, lr}
 80a0c6a:	4b02      	ldr	r3, [pc, #8]	; (80a0c74 <network_connect+0xc>)
 80a0c6c:	681b      	ldr	r3, [r3, #0]
 80a0c6e:	685b      	ldr	r3, [r3, #4]
 80a0c70:	9301      	str	r3, [sp, #4]
 80a0c72:	bd08      	pop	{r3, pc}
 80a0c74:	080601c8 	.word	0x080601c8

080a0c78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0c78:	b508      	push	{r3, lr}
 80a0c7a:	4b02      	ldr	r3, [pc, #8]	; (80a0c84 <network_connecting+0xc>)
 80a0c7c:	681b      	ldr	r3, [r3, #0]
 80a0c7e:	689b      	ldr	r3, [r3, #8]
 80a0c80:	9301      	str	r3, [sp, #4]
 80a0c82:	bd08      	pop	{r3, pc}
 80a0c84:	080601c8 	.word	0x080601c8

080a0c88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0c88:	b508      	push	{r3, lr}
 80a0c8a:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <network_disconnect+0xc>)
 80a0c8c:	681b      	ldr	r3, [r3, #0]
 80a0c8e:	68db      	ldr	r3, [r3, #12]
 80a0c90:	9301      	str	r3, [sp, #4]
 80a0c92:	bd08      	pop	{r3, pc}
 80a0c94:	080601c8 	.word	0x080601c8

080a0c98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0c98:	b508      	push	{r3, lr}
 80a0c9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ca4 <network_ready+0xc>)
 80a0c9c:	681b      	ldr	r3, [r3, #0]
 80a0c9e:	691b      	ldr	r3, [r3, #16]
 80a0ca0:	9301      	str	r3, [sp, #4]
 80a0ca2:	bd08      	pop	{r3, pc}
 80a0ca4:	080601c8 	.word	0x080601c8

080a0ca8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ca8:	b508      	push	{r3, lr}
 80a0caa:	4b02      	ldr	r3, [pc, #8]	; (80a0cb4 <network_on+0xc>)
 80a0cac:	681b      	ldr	r3, [r3, #0]
 80a0cae:	695b      	ldr	r3, [r3, #20]
 80a0cb0:	9301      	str	r3, [sp, #4]
 80a0cb2:	bd08      	pop	{r3, pc}
 80a0cb4:	080601c8 	.word	0x080601c8

080a0cb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0cb8:	b508      	push	{r3, lr}
 80a0cba:	4b02      	ldr	r3, [pc, #8]	; (80a0cc4 <network_off+0xc>)
 80a0cbc:	681b      	ldr	r3, [r3, #0]
 80a0cbe:	699b      	ldr	r3, [r3, #24]
 80a0cc0:	9301      	str	r3, [sp, #4]
 80a0cc2:	bd08      	pop	{r3, pc}
 80a0cc4:	080601c8 	.word	0x080601c8

080a0cc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0cc8:	b508      	push	{r3, lr}
 80a0cca:	4b02      	ldr	r3, [pc, #8]	; (80a0cd4 <network_listen+0xc>)
 80a0ccc:	681b      	ldr	r3, [r3, #0]
 80a0cce:	69db      	ldr	r3, [r3, #28]
 80a0cd0:	9301      	str	r3, [sp, #4]
 80a0cd2:	bd08      	pop	{r3, pc}
 80a0cd4:	080601c8 	.word	0x080601c8

080a0cd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0cd8:	b508      	push	{r3, lr}
 80a0cda:	4b02      	ldr	r3, [pc, #8]	; (80a0ce4 <network_listening+0xc>)
 80a0cdc:	681b      	ldr	r3, [r3, #0]
 80a0cde:	6a1b      	ldr	r3, [r3, #32]
 80a0ce0:	9301      	str	r3, [sp, #4]
 80a0ce2:	bd08      	pop	{r3, pc}
 80a0ce4:	080601c8 	.word	0x080601c8

080a0ce8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0ce8:	b508      	push	{r3, lr}
 80a0cea:	4b02      	ldr	r3, [pc, #8]	; (80a0cf4 <network_set_listen_timeout+0xc>)
 80a0cec:	681b      	ldr	r3, [r3, #0]
 80a0cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cf0:	9301      	str	r3, [sp, #4]
 80a0cf2:	bd08      	pop	{r3, pc}
 80a0cf4:	080601c8 	.word	0x080601c8

080a0cf8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0cf8:	b508      	push	{r3, lr}
 80a0cfa:	4b02      	ldr	r3, [pc, #8]	; (80a0d04 <network_get_listen_timeout+0xc>)
 80a0cfc:	681b      	ldr	r3, [r3, #0]
 80a0cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d00:	9301      	str	r3, [sp, #4]
 80a0d02:	bd08      	pop	{r3, pc}
 80a0d04:	080601c8 	.word	0x080601c8

080a0d08 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0d08:	b508      	push	{r3, lr}
 80a0d0a:	4b02      	ldr	r3, [pc, #8]	; (80a0d14 <network_is_on+0xc>)
 80a0d0c:	681b      	ldr	r3, [r3, #0]
 80a0d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0d10:	9301      	str	r3, [sp, #4]
 80a0d12:	bd08      	pop	{r3, pc}
 80a0d14:	080601c8 	.word	0x080601c8

080a0d18 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0d18:	b508      	push	{r3, lr}
 80a0d1a:	4b02      	ldr	r3, [pc, #8]	; (80a0d24 <network_is_off+0xc>)
 80a0d1c:	681b      	ldr	r3, [r3, #0]
 80a0d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d20:	9301      	str	r3, [sp, #4]
 80a0d22:	bd08      	pop	{r3, pc}
 80a0d24:	080601c8 	.word	0x080601c8

080a0d28 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b02      	ldr	r3, [pc, #8]	; (80a0d34 <spark_process+0xc>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	689b      	ldr	r3, [r3, #8]
 80a0d30:	9301      	str	r3, [sp, #4]
 80a0d32:	bd08      	pop	{r3, pc}
 80a0d34:	080601cc 	.word	0x080601cc

080a0d38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d38:	b508      	push	{r3, lr}
 80a0d3a:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d3c:	681b      	ldr	r3, [r3, #0]
 80a0d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d40:	9301      	str	r3, [sp, #4]
 80a0d42:	bd08      	pop	{r3, pc}
 80a0d44:	080601cc 	.word	0x080601cc

080a0d48 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b02      	ldr	r3, [pc, #8]	; (80a0d54 <malloc+0xc>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	681b      	ldr	r3, [r3, #0]
 80a0d50:	9301      	str	r3, [sp, #4]
 80a0d52:	bd08      	pop	{r3, pc}
 80a0d54:	080601a0 	.word	0x080601a0

080a0d58 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b02      	ldr	r3, [pc, #8]	; (80a0d64 <free+0xc>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	685b      	ldr	r3, [r3, #4]
 80a0d60:	9301      	str	r3, [sp, #4]
 80a0d62:	bd08      	pop	{r3, pc}
 80a0d64:	080601a0 	.word	0x080601a0

080a0d68 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0d68:	b508      	push	{r3, lr}
 80a0d6a:	4b02      	ldr	r3, [pc, #8]	; (80a0d74 <newlib_impure_ptr_callback+0xc>)
 80a0d6c:	681b      	ldr	r3, [r3, #0]
 80a0d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d70:	9301      	str	r3, [sp, #4]
 80a0d72:	bd08      	pop	{r3, pc}
 80a0d74:	080601a0 	.word	0x080601a0

080a0d78 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0d78:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0d7a:	2600      	movs	r6, #0
 80a0d7c:	4604      	mov	r4, r0
 80a0d7e:	460d      	mov	r5, r1
 80a0d80:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0d84:	f7ff fe50 	bl	80a0a28 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0d88:	4628      	mov	r0, r5
    _spi = spi;
 80a0d8a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0d8c:	f7ff fef8 	bl	80a0b80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0d90:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0d92:	6066      	str	r6, [r4, #4]
}
 80a0d94:	bd70      	pop	{r4, r5, r6, pc}

080a0d96 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0d96:	b510      	push	{r4, lr}
 80a0d98:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0d9a:	6800      	ldr	r0, [r0, #0]
 80a0d9c:	b118      	cbz	r0, 80a0da6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0d9e:	f7ff ffdb 	bl	80a0d58 <free>
            wakeupSource_ = nullptr;
 80a0da2:	2300      	movs	r3, #0
 80a0da4:	6023      	str	r3, [r4, #0]
        }
    }
 80a0da6:	bd10      	pop	{r4, pc}

080a0da8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0da8:	b510      	push	{r4, lr}
 80a0daa:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0dac:	f7ff fff3 	bl	80a0d96 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	bd10      	pop	{r4, pc}

080a0db4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0db4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0db6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0db8:	b510      	push	{r4, lr}
 80a0dba:	4b08      	ldr	r3, [pc, #32]	; (80a0ddc <_GLOBAL__sub_I_System+0x28>)
 80a0dbc:	4c08      	ldr	r4, [pc, #32]	; (80a0de0 <_GLOBAL__sub_I_System+0x2c>)
 80a0dbe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0dc0:	4b08      	ldr	r3, [pc, #32]	; (80a0de4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0dc2:	6020      	str	r0, [r4, #0]
 80a0dc4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0dc6:	71a0      	strb	r0, [r4, #6]
 80a0dc8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0dca:	f7ff ff29 	bl	80a0c20 <set_system_mode>
SystemClass System;
 80a0dce:	4620      	mov	r0, r4
 80a0dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0dd4:	4a04      	ldr	r2, [pc, #16]	; (80a0de8 <_GLOBAL__sub_I_System+0x34>)
 80a0dd6:	4905      	ldr	r1, [pc, #20]	; (80a0dec <_GLOBAL__sub_I_System+0x38>)
 80a0dd8:	f000 be28 	b.w	80a1a2c <__aeabi_atexit>
 80a0ddc:	200001ac 	.word	0x200001ac
 80a0de0:	200001a0 	.word	0x200001a0
 80a0de4:	ffff0000 	.word	0xffff0000
 80a0de8:	20000070 	.word	0x20000070
 80a0dec:	080a0da9 	.word	0x080a0da9

080a0df0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0df2:	4606      	mov	r6, r0
 80a0df4:	460d      	mov	r5, r1
  size_t n = 0;
 80a0df6:	2400      	movs	r4, #0
 80a0df8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0dfa:	42bd      	cmp	r5, r7
 80a0dfc:	d00c      	beq.n	80a0e18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0dfe:	6833      	ldr	r3, [r6, #0]
 80a0e00:	4630      	mov	r0, r6
 80a0e02:	689b      	ldr	r3, [r3, #8]
 80a0e04:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e08:	4798      	blx	r3
     if (chunk>=0)
 80a0e0a:	1e03      	subs	r3, r0, #0
 80a0e0c:	db01      	blt.n	80a0e12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e0e:	441c      	add	r4, r3
  while (size--) {
 80a0e10:	e7f3      	b.n	80a0dfa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e12:	2c00      	cmp	r4, #0
 80a0e14:	bf08      	it	eq
 80a0e16:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e18:	4620      	mov	r0, r4
 80a0e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e1c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0e1c:	b570      	push	{r4, r5, r6, lr}
 80a0e1e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e20:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0e22:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0e24:	b149      	cbz	r1, 80a0e3a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e26:	f001 fdb5 	bl	80a2994 <strlen>
 80a0e2a:	682b      	ldr	r3, [r5, #0]
 80a0e2c:	4602      	mov	r2, r0
 80a0e2e:	4621      	mov	r1, r4
 80a0e30:	4628      	mov	r0, r5
    }
 80a0e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0e36:	68db      	ldr	r3, [r3, #12]
 80a0e38:	4718      	bx	r3
    }
 80a0e3a:	bd70      	pop	{r4, r5, r6, pc}

080a0e3c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0e3c:	b508      	push	{r3, lr}
  return write(str);
 80a0e3e:	f7ff ffed 	bl	80a0e1c <_ZN5Print5writeEPKc>
}
 80a0e42:	bd08      	pop	{r3, pc}

080a0e44 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0e44:	6803      	ldr	r3, [r0, #0]
 80a0e46:	689b      	ldr	r3, [r3, #8]
 80a0e48:	4718      	bx	r3

080a0e4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0e4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0e4c:	210d      	movs	r1, #13
{
 80a0e4e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0e50:	f7ff fff8 	bl	80a0e44 <_ZN5Print5printEc>
  n += print('\n');
 80a0e54:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0e56:	4604      	mov	r4, r0
  n += print('\n');
 80a0e58:	4628      	mov	r0, r5
 80a0e5a:	f7ff fff3 	bl	80a0e44 <_ZN5Print5printEc>
  return n;
}
 80a0e5e:	4420      	add	r0, r4
 80a0e60:	bd38      	pop	{r3, r4, r5, pc}

080a0e62 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0e62:	b538      	push	{r3, r4, r5, lr}
 80a0e64:	4605      	mov	r5, r0
  return write(str);
 80a0e66:	f7ff ffd9 	bl	80a0e1c <_ZN5Print5writeEPKc>
 80a0e6a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0e6c:	4628      	mov	r0, r5
 80a0e6e:	f7ff ffec 	bl	80a0e4a <_ZN5Print7printlnEv>
  return n;
}
 80a0e72:	4420      	add	r0, r4
 80a0e74:	bd38      	pop	{r3, r4, r5, pc}

080a0e76 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0e76:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0e78:	2a01      	cmp	r2, #1
 80a0e7a:	bf98      	it	ls
 80a0e7c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0e7e:	b530      	push	{r4, r5, lr}
 80a0e80:	b08b      	sub	sp, #44	; 0x2c
 80a0e82:	460c      	mov	r4, r1
  *str = '\0';
 80a0e84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0e88:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0e8a:	4625      	mov	r5, r4
 80a0e8c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0e90:	fb04 5312 	mls	r3, r4, r2, r5
 80a0e94:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0e96:	2b09      	cmp	r3, #9
 80a0e98:	bf94      	ite	ls
 80a0e9a:	3330      	addls	r3, #48	; 0x30
 80a0e9c:	3337      	addhi	r3, #55	; 0x37
 80a0e9e:	b2db      	uxtb	r3, r3
  } while(n);
 80a0ea0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ea2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0ea6:	d9f0      	bls.n	80a0e8a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0ea8:	f7ff ffb8 	bl	80a0e1c <_ZN5Print5writeEPKc>
}
 80a0eac:	b00b      	add	sp, #44	; 0x2c
 80a0eae:	bd30      	pop	{r4, r5, pc}

080a0eb0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0eb4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0eb6:	4619      	mov	r1, r3
 80a0eb8:	4610      	mov	r0, r2
{
 80a0eba:	4692      	mov	sl, r2
 80a0ebc:	461f      	mov	r7, r3
 80a0ebe:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a0ec2:	f001 fa13 	bl	80a22ec <__aeabi_dcmpun>
 80a0ec6:	b140      	cbz	r0, 80a0eda <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a0ec8:	4950      	ldr	r1, [pc, #320]	; (80a100c <_ZN5Print10printFloatEdh+0x15c>)
 80a0eca:	4628      	mov	r0, r5
 80a0ecc:	f7ff ffa6 	bl	80a0e1c <_ZN5Print5writeEPKc>
 80a0ed0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	b003      	add	sp, #12
 80a0ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a0eda:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a0ede:	f04f 32ff 	mov.w	r2, #4294967295
 80a0ee2:	4650      	mov	r0, sl
 80a0ee4:	4621      	mov	r1, r4
 80a0ee6:	4b4a      	ldr	r3, [pc, #296]	; (80a1010 <_ZN5Print10printFloatEdh+0x160>)
 80a0ee8:	f001 fa00 	bl	80a22ec <__aeabi_dcmpun>
 80a0eec:	b948      	cbnz	r0, 80a0f02 <_ZN5Print10printFloatEdh+0x52>
 80a0eee:	f04f 32ff 	mov.w	r2, #4294967295
 80a0ef2:	4650      	mov	r0, sl
 80a0ef4:	4621      	mov	r1, r4
 80a0ef6:	4b46      	ldr	r3, [pc, #280]	; (80a1010 <_ZN5Print10printFloatEdh+0x160>)
 80a0ef8:	f001 f9da 	bl	80a22b0 <__aeabi_dcmple>
 80a0efc:	b908      	cbnz	r0, 80a0f02 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a0efe:	4945      	ldr	r1, [pc, #276]	; (80a1014 <_ZN5Print10printFloatEdh+0x164>)
 80a0f00:	e7e3      	b.n	80a0eca <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0f02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0f06:	4650      	mov	r0, sl
 80a0f08:	4639      	mov	r1, r7
 80a0f0a:	4b43      	ldr	r3, [pc, #268]	; (80a1018 <_ZN5Print10printFloatEdh+0x168>)
 80a0f0c:	f001 f9e4 	bl	80a22d8 <__aeabi_dcmpgt>
 80a0f10:	b108      	cbz	r0, 80a0f16 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a0f12:	4942      	ldr	r1, [pc, #264]	; (80a101c <_ZN5Print10printFloatEdh+0x16c>)
 80a0f14:	e7d9      	b.n	80a0eca <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0f16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0f1a:	4650      	mov	r0, sl
 80a0f1c:	4639      	mov	r1, r7
 80a0f1e:	4b40      	ldr	r3, [pc, #256]	; (80a1020 <_ZN5Print10printFloatEdh+0x170>)
 80a0f20:	f001 f9bc 	bl	80a229c <__aeabi_dcmplt>
 80a0f24:	2800      	cmp	r0, #0
 80a0f26:	d1f4      	bne.n	80a0f12 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0f28:	2200      	movs	r2, #0
 80a0f2a:	2300      	movs	r3, #0
 80a0f2c:	4650      	mov	r0, sl
 80a0f2e:	4639      	mov	r1, r7
 80a0f30:	f001 f9b4 	bl	80a229c <__aeabi_dcmplt>
 80a0f34:	4604      	mov	r4, r0
 80a0f36:	b130      	cbz	r0, 80a0f46 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0f38:	212d      	movs	r1, #45	; 0x2d
 80a0f3a:	4628      	mov	r0, r5
 80a0f3c:	f7ff ff82 	bl	80a0e44 <_ZN5Print5printEc>
 80a0f40:	4604      	mov	r4, r0
     number = -number;
 80a0f42:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a0f46:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0f4a:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0f4c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0f50:	4934      	ldr	r1, [pc, #208]	; (80a1024 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a0f52:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a102c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a0f56:	fa5f f38b 	uxtb.w	r3, fp
 80a0f5a:	429e      	cmp	r6, r3
 80a0f5c:	d906      	bls.n	80a0f6c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0f5e:	4642      	mov	r2, r8
 80a0f60:	464b      	mov	r3, r9
 80a0f62:	f001 f853 	bl	80a200c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a0f66:	f10b 0b01 	add.w	fp, fp, #1
 80a0f6a:	e7f4      	b.n	80a0f56 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a0f6c:	463b      	mov	r3, r7
 80a0f6e:	4652      	mov	r2, sl
 80a0f70:	f000 fd6c 	bl	80a1a4c <__adddf3>
 80a0f74:	4689      	mov	r9, r1
 80a0f76:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a0f78:	f001 f9f6 	bl	80a2368 <__aeabi_d2uiz>
 80a0f7c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a0f7e:	f000 fea1 	bl	80a1cc4 <__aeabi_ui2d>
 80a0f82:	4602      	mov	r2, r0
 80a0f84:	460b      	mov	r3, r1
 80a0f86:	4640      	mov	r0, r8
 80a0f88:	4649      	mov	r1, r9
 80a0f8a:	f000 fd5d 	bl	80a1a48 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0f8e:	220a      	movs	r2, #10
 80a0f90:	4680      	mov	r8, r0
 80a0f92:	4689      	mov	r9, r1
 80a0f94:	4628      	mov	r0, r5
 80a0f96:	4639      	mov	r1, r7
 80a0f98:	f7ff ff6d 	bl	80a0e76 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a0f9c:	4404      	add	r4, r0
  if (digits > 0) {
 80a0f9e:	b126      	cbz	r6, 80a0faa <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a0fa0:	4628      	mov	r0, r5
 80a0fa2:	4921      	ldr	r1, [pc, #132]	; (80a1028 <_ZN5Print10printFloatEdh+0x178>)
 80a0fa4:	f7ff ff3a 	bl	80a0e1c <_ZN5Print5writeEPKc>
    n += print(".");
 80a0fa8:	4404      	add	r4, r0
    remainder *= 10.0;
 80a0faa:	f04f 0a00 	mov.w	sl, #0
 80a0fae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a102c <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a0fb2:	3e01      	subs	r6, #1
 80a0fb4:	b2f6      	uxtb	r6, r6
 80a0fb6:	2eff      	cmp	r6, #255	; 0xff
 80a0fb8:	d08b      	beq.n	80a0ed2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a0fba:	4652      	mov	r2, sl
 80a0fbc:	465b      	mov	r3, fp
 80a0fbe:	4640      	mov	r0, r8
 80a0fc0:	4649      	mov	r1, r9
 80a0fc2:	f000 fef9 	bl	80a1db8 <__aeabi_dmul>
 80a0fc6:	4680      	mov	r8, r0
 80a0fc8:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0fca:	f001 f9a5 	bl	80a2318 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0fce:	1e07      	subs	r7, r0, #0
 80a0fd0:	da19      	bge.n	80a1006 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a0fd2:	212d      	movs	r1, #45	; 0x2d
 80a0fd4:	4628      	mov	r0, r5
 80a0fd6:	f7ff ff35 	bl	80a0e44 <_ZN5Print5printEc>
 80a0fda:	4603      	mov	r3, r0
            val = -n;
 80a0fdc:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0fde:	220a      	movs	r2, #10
 80a0fe0:	4628      	mov	r0, r5
 80a0fe2:	9301      	str	r3, [sp, #4]
 80a0fe4:	f7ff ff47 	bl	80a0e76 <_ZN5Print11printNumberEmh>
 80a0fe8:	9b01      	ldr	r3, [sp, #4]
 80a0fea:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0fec:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0fee:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0ff0:	f000 fe78 	bl	80a1ce4 <__aeabi_i2d>
 80a0ff4:	4602      	mov	r2, r0
 80a0ff6:	460b      	mov	r3, r1
 80a0ff8:	4640      	mov	r0, r8
 80a0ffa:	4649      	mov	r1, r9
 80a0ffc:	f000 fd24 	bl	80a1a48 <__aeabi_dsub>
 80a1000:	4680      	mov	r8, r0
 80a1002:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a1004:	e7d5      	b.n	80a0fb2 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a1006:	4639      	mov	r1, r7
        size_t t = 0;
 80a1008:	2300      	movs	r3, #0
 80a100a:	e7e8      	b.n	80a0fde <_ZN5Print10printFloatEdh+0x12e>
 80a100c:	080a2a9f 	.word	0x080a2a9f
 80a1010:	7fefffff 	.word	0x7fefffff
 80a1014:	080a2aa3 	.word	0x080a2aa3
 80a1018:	41efffff 	.word	0x41efffff
 80a101c:	080a2aa7 	.word	0x080a2aa7
 80a1020:	c1efffff 	.word	0xc1efffff
 80a1024:	3fe00000 	.word	0x3fe00000
 80a1028:	080a2aab 	.word	0x080a2aab
 80a102c:	40240000 	.word	0x40240000

080a1030 <_ZN5Print5printEfi>:
{
 80a1030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1032:	4605      	mov	r5, r0
 80a1034:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a1036:	4608      	mov	r0, r1
 80a1038:	f000 fe66 	bl	80a1d08 <__aeabi_f2d>
 80a103c:	b2e4      	uxtb	r4, r4
 80a103e:	4602      	mov	r2, r0
 80a1040:	460b      	mov	r3, r1
 80a1042:	4628      	mov	r0, r5
 80a1044:	9400      	str	r4, [sp, #0]
 80a1046:	f7ff ff33 	bl	80a0eb0 <_ZN5Print10printFloatEdh>
}
 80a104a:	b003      	add	sp, #12
 80a104c:	bd30      	pop	{r4, r5, pc}

080a104e <_ZN5Print5printEdi>:
  return printFloat(n, digits);
 80a104e:	f89d 1000 	ldrb.w	r1, [sp]
 80a1052:	9100      	str	r1, [sp, #0]
 80a1054:	f7ff bf2c 	b.w	80a0eb0 <_ZN5Print10printFloatEdh>

080a1058 <_ZN5Print7printlnEdi>:
{
 80a1058:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a105a:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a105e:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a1060:	9100      	str	r1, [sp, #0]
 80a1062:	f7ff ff25 	bl	80a0eb0 <_ZN5Print10printFloatEdh>
 80a1066:	4604      	mov	r4, r0
  n += println();
 80a1068:	4628      	mov	r0, r5
 80a106a:	f7ff feee 	bl	80a0e4a <_ZN5Print7printlnEv>
}
 80a106e:	4420      	add	r0, r4
 80a1070:	b003      	add	sp, #12
 80a1072:	bd30      	pop	{r4, r5, pc}

080a1074 <_ZN5Print7printlnEfi>:
{
 80a1074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1076:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a1078:	4608      	mov	r0, r1
{
 80a107a:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a107c:	f000 fe44 	bl	80a1d08 <__aeabi_f2d>
 80a1080:	9500      	str	r5, [sp, #0]
 80a1082:	4602      	mov	r2, r0
 80a1084:	460b      	mov	r3, r1
 80a1086:	4620      	mov	r0, r4
 80a1088:	f7ff ffe6 	bl	80a1058 <_ZN5Print7printlnEdi>
}
 80a108c:	b003      	add	sp, #12
 80a108e:	bd30      	pop	{r4, r5, pc}

080a1090 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1090:	2300      	movs	r3, #0
 80a1092:	6840      	ldr	r0, [r0, #4]
 80a1094:	461a      	mov	r2, r3
 80a1096:	4619      	mov	r1, r3
 80a1098:	f7ff be06 	b.w	80a0ca8 <network_on>

080a109c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a109c:	4b01      	ldr	r3, [pc, #4]	; (80a10a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a109e:	4a02      	ldr	r2, [pc, #8]	; (80a10a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a10a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a10a2:	4770      	bx	lr
 80a10a4:	200001b0 	.word	0x200001b0
 80a10a8:	080a2aad 	.word	0x080a2aad

080a10ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a10ac:	4b02      	ldr	r3, [pc, #8]	; (80a10b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a10ae:	681a      	ldr	r2, [r3, #0]
 80a10b0:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a10b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a10b4:	4770      	bx	lr
 80a10b6:	bf00      	nop
 80a10b8:	20000008 	.word	0x20000008
 80a10bc:	200001b4 	.word	0x200001b4

080a10c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a10c0:	2100      	movs	r1, #0
 80a10c2:	f7ff bdb5 	b.w	80a0c30 <system_delay_ms>

080a10c6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a10c6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a10c8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a10ca:	4604      	mov	r4, r0
      if (_M_manager)
 80a10cc:	b113      	cbz	r3, 80a10d4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a10ce:	2203      	movs	r2, #3
 80a10d0:	4601      	mov	r1, r0
 80a10d2:	4798      	blx	r3
    }
 80a10d4:	4620      	mov	r0, r4
 80a10d6:	bd10      	pop	{r4, pc}

080a10d8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a10d8:	b510      	push	{r4, lr}
 80a10da:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a10dc:	f7ff fff3 	bl	80a10c6 <_ZNSt14_Function_baseD1Ev>
 80a10e0:	4620      	mov	r0, r4
 80a10e2:	bd10      	pop	{r4, pc}

080a10e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a10e4:	2300      	movs	r3, #0
 80a10e6:	4803      	ldr	r0, [pc, #12]	; (80a10f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a10e8:	4a03      	ldr	r2, [pc, #12]	; (80a10f8 <_GLOBAL__sub_I_RGB+0x14>)
 80a10ea:	4904      	ldr	r1, [pc, #16]	; (80a10fc <_GLOBAL__sub_I_RGB+0x18>)
 80a10ec:	6083      	str	r3, [r0, #8]
 80a10ee:	f000 bc9d 	b.w	80a1a2c <__aeabi_atexit>
 80a10f2:	bf00      	nop
 80a10f4:	200001b8 	.word	0x200001b8
 80a10f8:	20000070 	.word	0x20000070
 80a10fc:	080a10d9 	.word	0x080a10d9

080a1100 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1100:	4b01      	ldr	r3, [pc, #4]	; (80a1108 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1102:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1104:	4770      	bx	lr
 80a1106:	bf00      	nop
 80a1108:	2000000c 	.word	0x2000000c

080a110c <serialEventRun>:
{
 80a110c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a110e:	4b13      	ldr	r3, [pc, #76]	; (80a115c <serialEventRun+0x50>)
 80a1110:	b143      	cbz	r3, 80a1124 <serialEventRun+0x18>
 80a1112:	f000 f969 	bl	80a13e8 <_Z16_fetch_usbserialv>
 80a1116:	6803      	ldr	r3, [r0, #0]
 80a1118:	691b      	ldr	r3, [r3, #16]
 80a111a:	4798      	blx	r3
 80a111c:	2800      	cmp	r0, #0
 80a111e:	dd01      	ble.n	80a1124 <serialEventRun+0x18>
        serialEvent();
 80a1120:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1124:	4b0e      	ldr	r3, [pc, #56]	; (80a1160 <serialEventRun+0x54>)
 80a1126:	b143      	cbz	r3, 80a113a <serialEventRun+0x2e>
 80a1128:	f000 fa44 	bl	80a15b4 <_Z22__fetch_global_Serial1v>
 80a112c:	6803      	ldr	r3, [r0, #0]
 80a112e:	691b      	ldr	r3, [r3, #16]
 80a1130:	4798      	blx	r3
 80a1132:	2800      	cmp	r0, #0
 80a1134:	dd01      	ble.n	80a113a <serialEventRun+0x2e>
        serialEvent1();
 80a1136:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a113a:	4b0a      	ldr	r3, [pc, #40]	; (80a1164 <serialEventRun+0x58>)
 80a113c:	b10b      	cbz	r3, 80a1142 <serialEventRun+0x36>
 80a113e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1142:	4b09      	ldr	r3, [pc, #36]	; (80a1168 <serialEventRun+0x5c>)
 80a1144:	b143      	cbz	r3, 80a1158 <serialEventRun+0x4c>
 80a1146:	f000 f98d 	bl	80a1464 <_Z17_fetch_usbserial1v>
 80a114a:	6803      	ldr	r3, [r0, #0]
 80a114c:	691b      	ldr	r3, [r3, #16]
 80a114e:	4798      	blx	r3
 80a1150:	2800      	cmp	r0, #0
 80a1152:	dd01      	ble.n	80a1158 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1154:	f3af 8000 	nop.w
}
 80a1158:	bd08      	pop	{r3, pc}
 80a115a:	bf00      	nop
	...

080a116c <_post_loop>:
{
 80a116c:	b508      	push	{r3, lr}
	serialEventRun();
 80a116e:	f7ff ffcd 	bl	80a110c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1172:	f7ff fc51 	bl	80a0a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1176:	4b01      	ldr	r3, [pc, #4]	; (80a117c <_post_loop+0x10>)
 80a1178:	6018      	str	r0, [r3, #0]
}
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	20000644 	.word	0x20000644

080a1180 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1180:	4802      	ldr	r0, [pc, #8]	; (80a118c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1182:	4a03      	ldr	r2, [pc, #12]	; (80a1190 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1184:	4903      	ldr	r1, [pc, #12]	; (80a1194 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1186:	1a12      	subs	r2, r2, r0
 80a1188:	f001 bbca 	b.w	80a2920 <memcpy>
 80a118c:	40024000 	.word	0x40024000
 80a1190:	40024004 	.word	0x40024004
 80a1194:	080a2c10 	.word	0x080a2c10

080a1198 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1198:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a119a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a119c:	461a      	mov	r2, r3
 80a119e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11a2:	9300      	str	r3, [sp, #0]
 80a11a4:	f7ff fd56 	bl	80a0c54 <system_ctrl_set_result>
}
 80a11a8:	b003      	add	sp, #12
 80a11aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a11b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a11b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a11b2:	8843      	ldrh	r3, [r0, #2]
 80a11b4:	2b0a      	cmp	r3, #10
 80a11b6:	d008      	beq.n	80a11ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a11b8:	2b50      	cmp	r3, #80	; 0x50
 80a11ba:	d10b      	bne.n	80a11d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a11bc:	4b09      	ldr	r3, [pc, #36]	; (80a11e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a11be:	681b      	ldr	r3, [r3, #0]
 80a11c0:	b14b      	cbz	r3, 80a11d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a11c2:	b003      	add	sp, #12
 80a11c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a11c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a11ca:	f7ff ffe5 	bl	80a1198 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a11ce:	b003      	add	sp, #12
 80a11d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a11d4:	2300      	movs	r3, #0
 80a11d6:	461a      	mov	r2, r3
 80a11d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11dc:	9300      	str	r3, [sp, #0]
 80a11de:	f7ff fd39 	bl	80a0c54 <system_ctrl_set_result>
}
 80a11e2:	e7f4      	b.n	80a11ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a11e4:	200001cc 	.word	0x200001cc

080a11e8 <module_user_init_hook>:
{
 80a11e8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a11ea:	4c12      	ldr	r4, [pc, #72]	; (80a1234 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a11ec:	2100      	movs	r1, #0
 80a11ee:	4812      	ldr	r0, [pc, #72]	; (80a1238 <module_user_init_hook+0x50>)
 80a11f0:	f7ff fdba 	bl	80a0d68 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a11f4:	4d11      	ldr	r5, [pc, #68]	; (80a123c <module_user_init_hook+0x54>)
 80a11f6:	6823      	ldr	r3, [r4, #0]
 80a11f8:	42ab      	cmp	r3, r5
 80a11fa:	bf0c      	ite	eq
 80a11fc:	2201      	moveq	r2, #1
 80a11fe:	2200      	movne	r2, #0
 80a1200:	4b0f      	ldr	r3, [pc, #60]	; (80a1240 <module_user_init_hook+0x58>)
 80a1202:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1204:	d002      	beq.n	80a120c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1206:	f7ff ffbb 	bl	80a1180 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a120a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a120c:	f7ff fbfc 	bl	80a0a08 <HAL_RNG_GetRandomNumber>
 80a1210:	4604      	mov	r4, r0
    srand(seed);
 80a1212:	f001 fb9b 	bl	80a294c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1216:	4b0b      	ldr	r3, [pc, #44]	; (80a1244 <module_user_init_hook+0x5c>)
 80a1218:	b113      	cbz	r3, 80a1220 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a121a:	4620      	mov	r0, r4
 80a121c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1220:	2100      	movs	r1, #0
 80a1222:	4808      	ldr	r0, [pc, #32]	; (80a1244 <module_user_init_hook+0x5c>)
 80a1224:	f7ff fd88 	bl	80a0d38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a122c:	2100      	movs	r1, #0
 80a122e:	4806      	ldr	r0, [pc, #24]	; (80a1248 <module_user_init_hook+0x60>)
 80a1230:	f7ff bd06 	b.w	80a0c40 <system_ctrl_set_app_request_handler>
 80a1234:	40024000 	.word	0x40024000
 80a1238:	080a1101 	.word	0x080a1101
 80a123c:	9a271c1e 	.word	0x9a271c1e
 80a1240:	200001c8 	.word	0x200001c8
 80a1244:	00000000 	.word	0x00000000
 80a1248:	080a11b1 	.word	0x080a11b1

080a124c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a124c:	4770      	bx	lr

080a124e <_ZN9IPAddressD0Ev>:
 80a124e:	b510      	push	{r4, lr}
 80a1250:	4604      	mov	r4, r0
 80a1252:	2118      	movs	r1, #24
 80a1254:	f000 fbef 	bl	80a1a36 <_ZdlPvj>
 80a1258:	4620      	mov	r0, r4
 80a125a:	bd10      	pop	{r4, pc}

080a125c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a125e:	460e      	mov	r6, r1
 80a1260:	2400      	movs	r4, #0
 80a1262:	f100 0708 	add.w	r7, r0, #8
 80a1266:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a1268:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a126c:	220a      	movs	r2, #10
 80a126e:	4630      	mov	r0, r6
 80a1270:	f7ff fe01 	bl	80a0e76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1274:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1276:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1278:	d101      	bne.n	80a127e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a127a:	4620      	mov	r0, r4
 80a127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a127e:	2c00      	cmp	r4, #0
 80a1280:	d0f2      	beq.n	80a1268 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1282:	212e      	movs	r1, #46	; 0x2e
 80a1284:	4630      	mov	r0, r6
 80a1286:	f7ff fddd 	bl	80a0e44 <_ZN5Print5printEc>
 80a128a:	4404      	add	r4, r0
 80a128c:	e7ec      	b.n	80a1268 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1290 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1290:	b510      	push	{r4, lr}
 80a1292:	4604      	mov	r4, r0
 80a1294:	4b04      	ldr	r3, [pc, #16]	; (80a12a8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1296:	2211      	movs	r2, #17
 80a1298:	2100      	movs	r1, #0
 80a129a:	f840 3b04 	str.w	r3, [r0], #4
 80a129e:	f001 fb4d 	bl	80a293c <memset>
}
 80a12a2:	4620      	mov	r0, r4
 80a12a4:	bd10      	pop	{r4, pc}
 80a12a6:	bf00      	nop
 80a12a8:	080a2ad8 	.word	0x080a2ad8

080a12ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a12ac:	4603      	mov	r3, r0
 80a12ae:	4a07      	ldr	r2, [pc, #28]	; (80a12cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a12b0:	b510      	push	{r4, lr}
 80a12b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a12b6:	f101 0210 	add.w	r2, r1, #16
 80a12ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80a12be:	4291      	cmp	r1, r2
 80a12c0:	f843 4b04 	str.w	r4, [r3], #4
 80a12c4:	d1f9      	bne.n	80a12ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a12c6:	780a      	ldrb	r2, [r1, #0]
 80a12c8:	701a      	strb	r2, [r3, #0]
}
 80a12ca:	bd10      	pop	{r4, pc}
 80a12cc:	080a2ad8 	.word	0x080a2ad8

080a12d0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a12d0:	4a02      	ldr	r2, [pc, #8]	; (80a12dc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a12d2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a12d6:	2204      	movs	r2, #4
 80a12d8:	7502      	strb	r2, [r0, #20]
}
 80a12da:	4770      	bx	lr
 80a12dc:	080a2ad8 	.word	0x080a2ad8

080a12e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a12e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a12e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a12e6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a12ea:	2304      	movs	r3, #4
 80a12ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a12f0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a12f4:	6044      	str	r4, [r0, #4]
 80a12f6:	7503      	strb	r3, [r0, #20]
}
 80a12f8:	bd10      	pop	{r4, pc}
	...

080a12fc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a12fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a12fe:	4d04      	ldr	r5, [pc, #16]	; (80a1310 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1300:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1302:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1306:	9500      	str	r5, [sp, #0]
 80a1308:	f7ff ffea 	bl	80a12e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a130c:	b003      	add	sp, #12
 80a130e:	bd30      	pop	{r4, r5, pc}
 80a1310:	080a2ad8 	.word	0x080a2ad8

080a1314 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1314:	7441      	strb	r1, [r0, #17]
}
 80a1316:	4770      	bx	lr

080a1318 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1318:	4770      	bx	lr

080a131a <_ZN9USBSerial4readEv>:
{
 80a131a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a131c:	2100      	movs	r1, #0
 80a131e:	7c00      	ldrb	r0, [r0, #16]
 80a1320:	f7ff fc5e 	bl	80a0be0 <HAL_USB_USART_Receive_Data>
}
 80a1324:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1328:	bd08      	pop	{r3, pc}

080a132a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a132a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a132c:	2101      	movs	r1, #1
 80a132e:	7c00      	ldrb	r0, [r0, #16]
 80a1330:	f7ff fc56 	bl	80a0be0 <HAL_USB_USART_Receive_Data>
}
 80a1334:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1338:	bd08      	pop	{r3, pc}

080a133a <_ZN9USBSerial17availableForWriteEv>:
{
 80a133a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a133c:	7c00      	ldrb	r0, [r0, #16]
 80a133e:	f7ff fc47 	bl	80a0bd0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1346:	bd08      	pop	{r3, pc}

080a1348 <_ZN9USBSerial9availableEv>:
{
 80a1348:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a134a:	7c00      	ldrb	r0, [r0, #16]
 80a134c:	f7ff fc38 	bl	80a0bc0 <HAL_USB_USART_Available_Data>
}
 80a1350:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1354:	bd08      	pop	{r3, pc}

080a1356 <_ZN9USBSerial5writeEh>:
{
 80a1356:	b538      	push	{r3, r4, r5, lr}
 80a1358:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a135a:	7c00      	ldrb	r0, [r0, #16]
{
 80a135c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a135e:	f7ff fc37 	bl	80a0bd0 <HAL_USB_USART_Available_Data_For_Write>
 80a1362:	2800      	cmp	r0, #0
 80a1364:	dc01      	bgt.n	80a136a <_ZN9USBSerial5writeEh+0x14>
 80a1366:	7c60      	ldrb	r0, [r4, #17]
 80a1368:	b128      	cbz	r0, 80a1376 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a136a:	4629      	mov	r1, r5
 80a136c:	7c20      	ldrb	r0, [r4, #16]
 80a136e:	f7ff fc3f 	bl	80a0bf0 <HAL_USB_USART_Send_Data>
 80a1372:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1376:	bd38      	pop	{r3, r4, r5, pc}

080a1378 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1378:	7c00      	ldrb	r0, [r0, #16]
 80a137a:	f7ff bc41 	b.w	80a0c00 <HAL_USB_USART_Flush_Data>

080a137e <_ZN9USBSerialD0Ev>:
 80a137e:	b510      	push	{r4, lr}
 80a1380:	4604      	mov	r4, r0
 80a1382:	2114      	movs	r1, #20
 80a1384:	f000 fb57 	bl	80a1a36 <_ZdlPvj>
 80a1388:	4620      	mov	r0, r4
 80a138a:	bd10      	pop	{r4, pc}

080a138c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a138c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1392:	4604      	mov	r4, r0
 80a1394:	4608      	mov	r0, r1
 80a1396:	2100      	movs	r1, #0
 80a1398:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a139c:	4b04      	ldr	r3, [pc, #16]	; (80a13b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a139e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a13a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a13a2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a13a4:	4611      	mov	r1, r2
  _blocking = true;
 80a13a6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a13a8:	f7ff fbfa 	bl	80a0ba0 <HAL_USB_USART_Init>
}
 80a13ac:	4620      	mov	r0, r4
 80a13ae:	bd10      	pop	{r4, pc}
 80a13b0:	080a2aec 	.word	0x080a2aec

080a13b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a13b4:	2200      	movs	r2, #0
 80a13b6:	7c00      	ldrb	r0, [r0, #16]
 80a13b8:	f7ff bbfa 	b.w	80a0bb0 <HAL_USB_USART_Begin>

080a13bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a13bc:	b510      	push	{r4, lr}
 80a13be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a13c0:	2214      	movs	r2, #20
 80a13c2:	2100      	movs	r1, #0
 80a13c4:	f001 faba 	bl	80a293c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a13c8:	4b05      	ldr	r3, [pc, #20]	; (80a13e0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a13ca:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a13cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a13ce:	4b05      	ldr	r3, [pc, #20]	; (80a13e4 <_Z19acquireSerialBufferv+0x28>)
 80a13d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a13d2:	f240 1301 	movw	r3, #257	; 0x101
 80a13d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a13d8:	2381      	movs	r3, #129	; 0x81
 80a13da:	8223      	strh	r3, [r4, #16]
}
 80a13dc:	bd10      	pop	{r4, pc}
 80a13de:	bf00      	nop
 80a13e0:	20000200 	.word	0x20000200
 80a13e4:	20000301 	.word	0x20000301

080a13e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a13e8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a13ea:	4d0f      	ldr	r5, [pc, #60]	; (80a1428 <_Z16_fetch_usbserialv+0x40>)
{
 80a13ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a13ee:	a801      	add	r0, sp, #4
 80a13f0:	f7ff ffe4 	bl	80a13bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a13f4:	7829      	ldrb	r1, [r5, #0]
 80a13f6:	f3bf 8f5b 	dmb	ish
 80a13fa:	f011 0401 	ands.w	r4, r1, #1
 80a13fe:	d110      	bne.n	80a1422 <_Z16_fetch_usbserialv+0x3a>
 80a1400:	4628      	mov	r0, r5
 80a1402:	f7fe fe4e 	bl	80a00a2 <__cxa_guard_acquire>
 80a1406:	b160      	cbz	r0, 80a1422 <_Z16_fetch_usbserialv+0x3a>
 80a1408:	4621      	mov	r1, r4
 80a140a:	aa01      	add	r2, sp, #4
 80a140c:	4807      	ldr	r0, [pc, #28]	; (80a142c <_Z16_fetch_usbserialv+0x44>)
 80a140e:	f7ff ffbd 	bl	80a138c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1412:	4628      	mov	r0, r5
 80a1414:	f7fe fe4a 	bl	80a00ac <__cxa_guard_release>
 80a1418:	4a05      	ldr	r2, [pc, #20]	; (80a1430 <_Z16_fetch_usbserialv+0x48>)
 80a141a:	4906      	ldr	r1, [pc, #24]	; (80a1434 <_Z16_fetch_usbserialv+0x4c>)
 80a141c:	4803      	ldr	r0, [pc, #12]	; (80a142c <_Z16_fetch_usbserialv+0x44>)
 80a141e:	f000 fb05 	bl	80a1a2c <__aeabi_atexit>
	return _usbserial;
}
 80a1422:	4802      	ldr	r0, [pc, #8]	; (80a142c <_Z16_fetch_usbserialv+0x44>)
 80a1424:	b007      	add	sp, #28
 80a1426:	bd30      	pop	{r4, r5, pc}
 80a1428:	200001d0 	.word	0x200001d0
 80a142c:	200001d8 	.word	0x200001d8
 80a1430:	20000070 	.word	0x20000070
 80a1434:	080a1319 	.word	0x080a1319

080a1438 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1438:	b510      	push	{r4, lr}
 80a143a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a143c:	2214      	movs	r2, #20
 80a143e:	2100      	movs	r1, #0
 80a1440:	f001 fa7c 	bl	80a293c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1444:	4b05      	ldr	r3, [pc, #20]	; (80a145c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1446:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1448:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a144a:	4b05      	ldr	r3, [pc, #20]	; (80a1460 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a144c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a144e:	f240 1301 	movw	r3, #257	; 0x101
 80a1452:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1454:	2381      	movs	r3, #129	; 0x81
 80a1456:	8223      	strh	r3, [r4, #16]
}
 80a1458:	bd10      	pop	{r4, pc}
 80a145a:	bf00      	nop
 80a145c:	20000382 	.word	0x20000382
 80a1460:	20000483 	.word	0x20000483

080a1464 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1464:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1466:	4c0f      	ldr	r4, [pc, #60]	; (80a14a4 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1468:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a146a:	a801      	add	r0, sp, #4
 80a146c:	f7ff ffe4 	bl	80a1438 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1470:	7823      	ldrb	r3, [r4, #0]
 80a1472:	f3bf 8f5b 	dmb	ish
 80a1476:	07db      	lsls	r3, r3, #31
 80a1478:	d410      	bmi.n	80a149c <_Z17_fetch_usbserial1v+0x38>
 80a147a:	4620      	mov	r0, r4
 80a147c:	f7fe fe11 	bl	80a00a2 <__cxa_guard_acquire>
 80a1480:	b160      	cbz	r0, 80a149c <_Z17_fetch_usbserial1v+0x38>
 80a1482:	2101      	movs	r1, #1
 80a1484:	aa01      	add	r2, sp, #4
 80a1486:	4808      	ldr	r0, [pc, #32]	; (80a14a8 <_Z17_fetch_usbserial1v+0x44>)
 80a1488:	f7ff ff80 	bl	80a138c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a148c:	4620      	mov	r0, r4
 80a148e:	f7fe fe0d 	bl	80a00ac <__cxa_guard_release>
 80a1492:	4a06      	ldr	r2, [pc, #24]	; (80a14ac <_Z17_fetch_usbserial1v+0x48>)
 80a1494:	4906      	ldr	r1, [pc, #24]	; (80a14b0 <_Z17_fetch_usbserial1v+0x4c>)
 80a1496:	4804      	ldr	r0, [pc, #16]	; (80a14a8 <_Z17_fetch_usbserial1v+0x44>)
 80a1498:	f000 fac8 	bl	80a1a2c <__aeabi_atexit>
  return _usbserial1;
}
 80a149c:	4802      	ldr	r0, [pc, #8]	; (80a14a8 <_Z17_fetch_usbserial1v+0x44>)
 80a149e:	b006      	add	sp, #24
 80a14a0:	bd10      	pop	{r4, pc}
 80a14a2:	bf00      	nop
 80a14a4:	200001d4 	.word	0x200001d4
 80a14a8:	200001ec 	.word	0x200001ec
 80a14ac:	20000070 	.word	0x20000070
 80a14b0:	080a1319 	.word	0x080a1319

080a14b4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a14b4:	4700      	bx	r0
	...

080a14b8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a14b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a14bc:	2400      	movs	r4, #0
{
 80a14be:	461d      	mov	r5, r3
 80a14c0:	460f      	mov	r7, r1
 80a14c2:	4690      	mov	r8, r2
 80a14c4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a14c6:	f7ff fa87 	bl	80a09d8 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a14ca:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a14cc:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a14ce:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a14d2:	bfa8      	it	ge
 80a14d4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80a14d8:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a14dc:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a14e0:	bfa4      	itt	ge
 80a14e2:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a14e4:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a14e8:	463a      	mov	r2, r7
 80a14ea:	4643      	mov	r3, r8
 80a14ec:	4630      	mov	r0, r6
 80a14ee:	4906      	ldr	r1, [pc, #24]	; (80a1508 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a14f0:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a14f2:	bfa8      	it	ge
 80a14f4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a14f8:	f7ff fa66 	bl	80a09c8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a14fc:	fab0 f080 	clz	r0, r0
 80a1500:	0940      	lsrs	r0, r0, #5
 80a1502:	b004      	add	sp, #16
 80a1504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1508:	080a14b5 	.word	0x080a14b5

080a150c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a150c:	f7ff ba6c 	b.w	80a09e8 <HAL_Interrupts_Enable_All>

080a1510 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1510:	4770      	bx	lr

080a1512 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1512:	7441      	strb	r1, [r0, #17]
}
 80a1514:	4770      	bx	lr

080a1516 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1516:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1518:	7c00      	ldrb	r0, [r0, #16]
 80a151a:	f7ff facd 	bl	80a0ab8 <hal_usart_available_data_for_write>
}
 80a151e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1522:	bd08      	pop	{r3, pc}

080a1524 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1524:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1526:	7c00      	ldrb	r0, [r0, #16]
 80a1528:	f7ff fa9e 	bl	80a0a68 <hal_usart_available>
}
 80a152c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1530:	bd08      	pop	{r3, pc}

080a1532 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1532:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1534:	7c00      	ldrb	r0, [r0, #16]
 80a1536:	f7ff faa7 	bl	80a0a88 <hal_usart_peek>
}
 80a153a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a153e:	bd08      	pop	{r3, pc}

080a1540 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1540:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1542:	7c00      	ldrb	r0, [r0, #16]
 80a1544:	f7ff fa98 	bl	80a0a78 <hal_usart_read>
}
 80a1548:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a154c:	bd08      	pop	{r3, pc}

080a154e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a154e:	7c00      	ldrb	r0, [r0, #16]
 80a1550:	f7ff baa2 	b.w	80a0a98 <hal_usart_flush>

080a1554 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1554:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1556:	7c46      	ldrb	r6, [r0, #17]
{
 80a1558:	4604      	mov	r4, r0
 80a155a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a155c:	b12e      	cbz	r6, 80a156a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a155e:	4629      	mov	r1, r5
 80a1560:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1566:	f7ff ba77 	b.w	80a0a58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a156a:	7c00      	ldrb	r0, [r0, #16]
 80a156c:	f7ff faa4 	bl	80a0ab8 <hal_usart_available_data_for_write>
 80a1570:	2800      	cmp	r0, #0
 80a1572:	dcf4      	bgt.n	80a155e <_ZN11USARTSerial5writeEh+0xa>
}
 80a1574:	4630      	mov	r0, r6
 80a1576:	bd70      	pop	{r4, r5, r6, pc}

080a1578 <_ZN11USARTSerialD0Ev>:
 80a1578:	b510      	push	{r4, lr}
 80a157a:	4604      	mov	r4, r0
 80a157c:	2114      	movs	r1, #20
 80a157e:	f000 fa5a 	bl	80a1a36 <_ZdlPvj>
 80a1582:	4620      	mov	r0, r4
 80a1584:	bd10      	pop	{r4, pc}
	...

080a1588 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1588:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a158c:	b510      	push	{r4, lr}
 80a158e:	4604      	mov	r4, r0
 80a1590:	4608      	mov	r0, r1
 80a1592:	4611      	mov	r1, r2
 80a1594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1598:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a159c:	4a04      	ldr	r2, [pc, #16]	; (80a15b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a159e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a15a0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a15a2:	2201      	movs	r2, #1
 80a15a4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a15a6:	461a      	mov	r2, r3
 80a15a8:	f7ff fa4e 	bl	80a0a48 <hal_usart_init>
}
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	bd10      	pop	{r4, pc}
 80a15b0:	080a2b1c 	.word	0x080a2b1c

080a15b4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a15b4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a15b6:	4d0d      	ldr	r5, [pc, #52]	; (80a15ec <_Z22__fetch_global_Serial1v+0x38>)
 80a15b8:	7829      	ldrb	r1, [r5, #0]
 80a15ba:	f3bf 8f5b 	dmb	ish
 80a15be:	f011 0401 	ands.w	r4, r1, #1
 80a15c2:	d111      	bne.n	80a15e8 <_Z22__fetch_global_Serial1v+0x34>
 80a15c4:	4628      	mov	r0, r5
 80a15c6:	f7fe fd6c 	bl	80a00a2 <__cxa_guard_acquire>
 80a15ca:	b168      	cbz	r0, 80a15e8 <_Z22__fetch_global_Serial1v+0x34>
 80a15cc:	4621      	mov	r1, r4
 80a15ce:	4a08      	ldr	r2, [pc, #32]	; (80a15f0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a15d0:	4b08      	ldr	r3, [pc, #32]	; (80a15f4 <_Z22__fetch_global_Serial1v+0x40>)
 80a15d2:	4809      	ldr	r0, [pc, #36]	; (80a15f8 <_Z22__fetch_global_Serial1v+0x44>)
 80a15d4:	f7ff ffd8 	bl	80a1588 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a15d8:	4628      	mov	r0, r5
 80a15da:	f7fe fd67 	bl	80a00ac <__cxa_guard_release>
 80a15de:	4a07      	ldr	r2, [pc, #28]	; (80a15fc <_Z22__fetch_global_Serial1v+0x48>)
 80a15e0:	4907      	ldr	r1, [pc, #28]	; (80a1600 <_Z22__fetch_global_Serial1v+0x4c>)
 80a15e2:	4805      	ldr	r0, [pc, #20]	; (80a15f8 <_Z22__fetch_global_Serial1v+0x44>)
 80a15e4:	f000 fa22 	bl	80a1a2c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a15e8:	4803      	ldr	r0, [pc, #12]	; (80a15f8 <_Z22__fetch_global_Serial1v+0x44>)
 80a15ea:	bd38      	pop	{r3, r4, r5, pc}
 80a15ec:	20000504 	.word	0x20000504
 80a15f0:	20000508 	.word	0x20000508
 80a15f4:	2000058c 	.word	0x2000058c
 80a15f8:	20000610 	.word	0x20000610
 80a15fc:	20000070 	.word	0x20000070
 80a1600:	080a1511 	.word	0x080a1511

080a1604 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1604:	4770      	bx	lr

080a1606 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1608:	4606      	mov	r6, r0
 80a160a:	4615      	mov	r5, r2
 80a160c:	460c      	mov	r4, r1
 80a160e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1610:	42bc      	cmp	r4, r7
 80a1612:	d006      	beq.n	80a1622 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1614:	6833      	ldr	r3, [r6, #0]
 80a1616:	4630      	mov	r0, r6
 80a1618:	689b      	ldr	r3, [r3, #8]
 80a161a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a161e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1620:	e7f6      	b.n	80a1610 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1622:	4628      	mov	r0, r5
 80a1624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1626 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1626:	2200      	movs	r2, #0
 80a1628:	7c00      	ldrb	r0, [r0, #16]
 80a162a:	f7ff ba65 	b.w	80a0af8 <hal_i2c_write>

080a162e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a162e:	2100      	movs	r1, #0
 80a1630:	7c00      	ldrb	r0, [r0, #16]
 80a1632:	f7ff ba69 	b.w	80a0b08 <hal_i2c_available>

080a1636 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1636:	2100      	movs	r1, #0
 80a1638:	7c00      	ldrb	r0, [r0, #16]
 80a163a:	f7ff ba6d 	b.w	80a0b18 <hal_i2c_read>

080a163e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a163e:	2100      	movs	r1, #0
 80a1640:	7c00      	ldrb	r0, [r0, #16]
 80a1642:	f7ff ba71 	b.w	80a0b28 <hal_i2c_peek>

080a1646 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1646:	2100      	movs	r1, #0
 80a1648:	7c00      	ldrb	r0, [r0, #16]
 80a164a:	f7ff ba75 	b.w	80a0b38 <hal_i2c_flush>

080a164e <_ZN7TwoWireD0Ev>:
 80a164e:	b510      	push	{r4, lr}
 80a1650:	4604      	mov	r4, r0
 80a1652:	2114      	movs	r1, #20
 80a1654:	f000 f9ef 	bl	80a1a36 <_ZdlPvj>
 80a1658:	4620      	mov	r0, r4
 80a165a:	bd10      	pop	{r4, pc}

080a165c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a165c:	b510      	push	{r4, lr}
 80a165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1662:	4604      	mov	r4, r0
 80a1664:	4608      	mov	r0, r1
 80a1666:	2100      	movs	r1, #0
 80a1668:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a166c:	4b03      	ldr	r3, [pc, #12]	; (80a167c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a166e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1670:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1672:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1674:	f7ff fa70 	bl	80a0b58 <hal_i2c_init>
}
 80a1678:	4620      	mov	r0, r4
 80a167a:	bd10      	pop	{r4, pc}
 80a167c:	080a2b4c 	.word	0x080a2b4c

080a1680 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1680:	2300      	movs	r3, #0
 80a1682:	7c00      	ldrb	r0, [r0, #16]
 80a1684:	461a      	mov	r2, r3
 80a1686:	4619      	mov	r1, r3
 80a1688:	f7ff ba1e 	b.w	80a0ac8 <hal_i2c_begin>

080a168c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a168c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a168e:	2200      	movs	r2, #0
 80a1690:	2314      	movs	r3, #20
 80a1692:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1696:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a169a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a169c:	7c00      	ldrb	r0, [r0, #16]
 80a169e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a16a2:	684b      	ldr	r3, [r1, #4]
 80a16a4:	9303      	str	r3, [sp, #12]
 80a16a6:	68cb      	ldr	r3, [r1, #12]
 80a16a8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a16aa:	7a0b      	ldrb	r3, [r1, #8]
 80a16ac:	a901      	add	r1, sp, #4
 80a16ae:	9305      	str	r3, [sp, #20]
 80a16b0:	f7ff fa5c 	bl	80a0b6c <hal_i2c_request_ex>
}
 80a16b4:	b007      	add	sp, #28
 80a16b6:	f85d fb04 	ldr.w	pc, [sp], #4

080a16ba <_ZN7TwoWire11requestFromEhjh>:
{
 80a16ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a16bc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a16be:	f88d 1000 	strb.w	r1, [sp]
 80a16c2:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a16c6:	bf18      	it	ne
 80a16c8:	2301      	movne	r3, #1
 80a16ca:	9103      	str	r1, [sp, #12]
 80a16cc:	4669      	mov	r1, sp
    size_ = size;
 80a16ce:	9201      	str	r2, [sp, #4]
 80a16d0:	f88d 3008 	strb.w	r3, [sp, #8]
 80a16d4:	f7ff ffda 	bl	80a168c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a16d8:	b005      	add	sp, #20
 80a16da:	f85d fb04 	ldr.w	pc, [sp], #4

080a16de <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a16de:	2301      	movs	r3, #1
 80a16e0:	f7ff bfeb 	b.w	80a16ba <_ZN7TwoWire11requestFromEhjh>

080a16e4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a16e4:	2200      	movs	r2, #0
 80a16e6:	7c00      	ldrb	r0, [r0, #16]
 80a16e8:	f7ff b9f6 	b.w	80a0ad8 <hal_i2c_begin_transmission>

080a16ec <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a16ec:	b2c9      	uxtb	r1, r1
 80a16ee:	f7ff bff9 	b.w	80a16e4 <_ZN7TwoWire17beginTransmissionEh>

080a16f2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a16f2:	2200      	movs	r2, #0
 80a16f4:	7c00      	ldrb	r0, [r0, #16]
 80a16f6:	f7ff b9f7 	b.w	80a0ae8 <hal_i2c_end_transmission>

080a16fa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a16fa:	2101      	movs	r1, #1
 80a16fc:	f7ff bff9 	b.w	80a16f2 <_ZN7TwoWire15endTransmissionEh>

080a1700 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1700:	2200      	movs	r2, #0
 80a1702:	6840      	ldr	r0, [r0, #4]
 80a1704:	4611      	mov	r1, r2
 80a1706:	f7ff bac7 	b.w	80a0c98 <network_ready>

080a170a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a170a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a170c:	4615      	mov	r5, r2
 80a170e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1710:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1712:	460e      	mov	r6, r1
 80a1714:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1716:	2100      	movs	r1, #0
 80a1718:	a803      	add	r0, sp, #12
 80a171a:	f001 f90f 	bl	80a293c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a171e:	4628      	mov	r0, r5
 80a1720:	f001 f938 	bl	80a2994 <strlen>
 80a1724:	2700      	movs	r7, #0
 80a1726:	b281      	uxth	r1, r0
 80a1728:	6873      	ldr	r3, [r6, #4]
 80a172a:	4628      	mov	r0, r5
 80a172c:	9700      	str	r7, [sp, #0]
 80a172e:	aa03      	add	r2, sp, #12
 80a1730:	f7ff fa6e 	bl	80a0c10 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1734:	b130      	cbz	r0, 80a1744 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1736:	4639      	mov	r1, r7
 80a1738:	4620      	mov	r0, r4
 80a173a:	f7ff fdc9 	bl	80a12d0 <_ZN9IPAddressC1Em>
    }
 80a173e:	4620      	mov	r0, r4
 80a1740:	b009      	add	sp, #36	; 0x24
 80a1742:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1744:	4620      	mov	r0, r4
 80a1746:	a903      	add	r1, sp, #12
 80a1748:	f7ff fdb0 	bl	80a12ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a174c:	e7f7      	b.n	80a173e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a174e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a174e:	2200      	movs	r2, #0
 80a1750:	6840      	ldr	r0, [r0, #4]
 80a1752:	4611      	mov	r1, r2
 80a1754:	f7ff bac0 	b.w	80a0cd8 <network_listening>

080a1758 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1758:	2200      	movs	r2, #0
 80a175a:	6840      	ldr	r0, [r0, #4]
 80a175c:	4611      	mov	r1, r2
 80a175e:	f7ff bacb 	b.w	80a0cf8 <network_get_listen_timeout>

080a1762 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1762:	2200      	movs	r2, #0
 80a1764:	6840      	ldr	r0, [r0, #4]
 80a1766:	f7ff babf 	b.w	80a0ce8 <network_set_listen_timeout>

080a176a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a176a:	2200      	movs	r2, #0
 80a176c:	6840      	ldr	r0, [r0, #4]
 80a176e:	f081 0101 	eor.w	r1, r1, #1
 80a1772:	f7ff baa9 	b.w	80a0cc8 <network_listen>

080a1776 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1776:	2300      	movs	r3, #0
 80a1778:	6840      	ldr	r0, [r0, #4]
 80a177a:	461a      	mov	r2, r3
 80a177c:	4619      	mov	r1, r3
 80a177e:	f7ff ba9b 	b.w	80a0cb8 <network_off>

080a1782 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1782:	2200      	movs	r2, #0
 80a1784:	6840      	ldr	r0, [r0, #4]
 80a1786:	4611      	mov	r1, r2
 80a1788:	f7ff ba76 	b.w	80a0c78 <network_connecting>

080a178c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a178c:	2200      	movs	r2, #0
 80a178e:	2102      	movs	r1, #2
 80a1790:	6840      	ldr	r0, [r0, #4]
 80a1792:	f7ff ba79 	b.w	80a0c88 <network_disconnect>

080a1796 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1796:	2300      	movs	r3, #0
 80a1798:	6840      	ldr	r0, [r0, #4]
 80a179a:	461a      	mov	r2, r3
 80a179c:	f7ff ba64 	b.w	80a0c68 <network_connect>

080a17a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a17a0:	2204      	movs	r2, #4
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a17a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a17a6:	4a02      	ldr	r2, [pc, #8]	; (80a17b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a17a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a17aa:	4770      	bx	lr
 80a17ac:	20000624 	.word	0x20000624
 80a17b0:	080a2b74 	.word	0x080a2b74

080a17b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a17b4:	2300      	movs	r3, #0
 80a17b6:	6840      	ldr	r0, [r0, #4]
 80a17b8:	461a      	mov	r2, r3
 80a17ba:	f7ff ba55 	b.w	80a0c68 <network_connect>

080a17be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a17be:	2200      	movs	r2, #0
 80a17c0:	2102      	movs	r1, #2
 80a17c2:	6840      	ldr	r0, [r0, #4]
 80a17c4:	f7ff ba60 	b.w	80a0c88 <network_disconnect>

080a17c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a17c8:	2200      	movs	r2, #0
 80a17ca:	6840      	ldr	r0, [r0, #4]
 80a17cc:	4611      	mov	r1, r2
 80a17ce:	f7ff ba53 	b.w	80a0c78 <network_connecting>

080a17d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a17d2:	2200      	movs	r2, #0
 80a17d4:	6840      	ldr	r0, [r0, #4]
 80a17d6:	4611      	mov	r1, r2
 80a17d8:	f7ff ba5e 	b.w	80a0c98 <network_ready>

080a17dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a17dc:	2300      	movs	r3, #0
 80a17de:	6840      	ldr	r0, [r0, #4]
 80a17e0:	461a      	mov	r2, r3
 80a17e2:	4619      	mov	r1, r3
 80a17e4:	f7ff ba60 	b.w	80a0ca8 <network_on>

080a17e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a17e8:	2300      	movs	r3, #0
 80a17ea:	6840      	ldr	r0, [r0, #4]
 80a17ec:	461a      	mov	r2, r3
 80a17ee:	4619      	mov	r1, r3
 80a17f0:	f7ff ba62 	b.w	80a0cb8 <network_off>

080a17f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a17f4:	2100      	movs	r1, #0
 80a17f6:	6840      	ldr	r0, [r0, #4]
 80a17f8:	f7ff ba86 	b.w	80a0d08 <network_is_on>

080a17fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a17fc:	2100      	movs	r1, #0
 80a17fe:	6840      	ldr	r0, [r0, #4]
 80a1800:	f7ff ba8a 	b.w	80a0d18 <network_is_off>

080a1804 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1804:	2200      	movs	r2, #0
 80a1806:	6840      	ldr	r0, [r0, #4]
 80a1808:	f081 0101 	eor.w	r1, r1, #1
 80a180c:	f7ff ba5c 	b.w	80a0cc8 <network_listen>

080a1810 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1810:	2200      	movs	r2, #0
 80a1812:	6840      	ldr	r0, [r0, #4]
 80a1814:	f7ff ba68 	b.w	80a0ce8 <network_set_listen_timeout>

080a1818 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1818:	2200      	movs	r2, #0
 80a181a:	6840      	ldr	r0, [r0, #4]
 80a181c:	4611      	mov	r1, r2
 80a181e:	f7ff ba6b 	b.w	80a0cf8 <network_get_listen_timeout>

080a1822 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1822:	2200      	movs	r2, #0
 80a1824:	6840      	ldr	r0, [r0, #4]
 80a1826:	4611      	mov	r1, r2
 80a1828:	f7ff ba56 	b.w	80a0cd8 <network_listening>

080a182c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a182c:	b570      	push	{r4, r5, r6, lr}
 80a182e:	4615      	mov	r5, r2
 80a1830:	b08e      	sub	sp, #56	; 0x38
 80a1832:	4604      	mov	r4, r0
    IPAddress addr;
 80a1834:	a808      	add	r0, sp, #32
 80a1836:	f7ff fd2b 	bl	80a1290 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a183a:	2211      	movs	r2, #17
 80a183c:	2100      	movs	r1, #0
 80a183e:	a803      	add	r0, sp, #12
 80a1840:	f001 f87c 	bl	80a293c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1844:	2600      	movs	r6, #0
 80a1846:	4628      	mov	r0, r5
 80a1848:	f001 f8a4 	bl	80a2994 <strlen>
 80a184c:	4b0a      	ldr	r3, [pc, #40]	; (80a1878 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a184e:	9600      	str	r6, [sp, #0]
 80a1850:	b281      	uxth	r1, r0
 80a1852:	685b      	ldr	r3, [r3, #4]
 80a1854:	4628      	mov	r0, r5
 80a1856:	aa03      	add	r2, sp, #12
 80a1858:	f7ff f9da 	bl	80a0c10 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a185c:	b130      	cbz	r0, 80a186c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a185e:	4631      	mov	r1, r6
 80a1860:	4620      	mov	r0, r4
 80a1862:	f7ff fd35 	bl	80a12d0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1866:	4620      	mov	r0, r4
 80a1868:	b00e      	add	sp, #56	; 0x38
 80a186a:	bd70      	pop	{r4, r5, r6, pc}
 80a186c:	4620      	mov	r0, r4
 80a186e:	a903      	add	r1, sp, #12
 80a1870:	f7ff fd1c 	bl	80a12ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1874:	e7f7      	b.n	80a1866 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1876:	bf00      	nop
 80a1878:	20000624 	.word	0x20000624

080a187c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a187c:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a187e:	4a03      	ldr	r2, [pc, #12]	; (80a188c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1880:	601a      	str	r2, [r3, #0]
 80a1882:	2200      	movs	r2, #0
 80a1884:	605a      	str	r2, [r3, #4]

} // spark
 80a1886:	4770      	bx	lr
 80a1888:	2000062c 	.word	0x2000062c
 80a188c:	080a2bb0 	.word	0x080a2bb0

080a1890 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a1890:	b510      	push	{r4, lr}
 80a1892:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1894:	6880      	ldr	r0, [r0, #8]
 80a1896:	b108      	cbz	r0, 80a189c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1898:	f7ff f8ce 	bl	80a0a38 <os_mutex_recursive_destroy>
 80a189c:	4620      	mov	r0, r4
 80a189e:	bd10      	pop	{r4, pc}

080a18a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a18a0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a18a2:	b570      	push	{r4, r5, r6, lr}
 80a18a4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a18a6:	d901      	bls.n	80a18ac <pinAvailable+0xc>
    return false;
 80a18a8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a18aa:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a18ac:	f1a0 030d 	sub.w	r3, r0, #13
 80a18b0:	2b02      	cmp	r3, #2
 80a18b2:	d90b      	bls.n	80a18cc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a18b4:	2801      	cmp	r0, #1
 80a18b6:	d826      	bhi.n	80a1906 <pinAvailable+0x66>
 80a18b8:	f000 f890 	bl	80a19dc <_Z19__fetch_global_Wirev>
 80a18bc:	2100      	movs	r1, #0
 80a18be:	7c00      	ldrb	r0, [r0, #16]
 80a18c0:	f7ff f942 	bl	80a0b48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a18c4:	f080 0001 	eor.w	r0, r0, #1
 80a18c8:	b2c0      	uxtb	r0, r0
 80a18ca:	e7ee      	b.n	80a18aa <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a18cc:	4e13      	ldr	r6, [pc, #76]	; (80a191c <pinAvailable+0x7c>)
 80a18ce:	7831      	ldrb	r1, [r6, #0]
 80a18d0:	f3bf 8f5b 	dmb	ish
 80a18d4:	f011 0501 	ands.w	r5, r1, #1
 80a18d8:	d10f      	bne.n	80a18fa <pinAvailable+0x5a>
 80a18da:	4630      	mov	r0, r6
 80a18dc:	f7fe fbe1 	bl	80a00a2 <__cxa_guard_acquire>
 80a18e0:	b158      	cbz	r0, 80a18fa <pinAvailable+0x5a>
 80a18e2:	4629      	mov	r1, r5
 80a18e4:	480e      	ldr	r0, [pc, #56]	; (80a1920 <pinAvailable+0x80>)
 80a18e6:	f7ff fa47 	bl	80a0d78 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a18ea:	4630      	mov	r0, r6
 80a18ec:	f7fe fbde 	bl	80a00ac <__cxa_guard_release>
 80a18f0:	4a0c      	ldr	r2, [pc, #48]	; (80a1924 <pinAvailable+0x84>)
 80a18f2:	490d      	ldr	r1, [pc, #52]	; (80a1928 <pinAvailable+0x88>)
 80a18f4:	480a      	ldr	r0, [pc, #40]	; (80a1920 <pinAvailable+0x80>)
 80a18f6:	f000 f899 	bl	80a1a2c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a18fa:	4b09      	ldr	r3, [pc, #36]	; (80a1920 <pinAvailable+0x80>)
 80a18fc:	7818      	ldrb	r0, [r3, #0]
 80a18fe:	f7ff f947 	bl	80a0b90 <hal_spi_is_enabled>
 80a1902:	2800      	cmp	r0, #0
 80a1904:	d1d0      	bne.n	80a18a8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1906:	3c12      	subs	r4, #18
 80a1908:	2c01      	cmp	r4, #1
 80a190a:	d805      	bhi.n	80a1918 <pinAvailable+0x78>
 80a190c:	f7ff fe52 	bl	80a15b4 <_Z22__fetch_global_Serial1v>
 80a1910:	7c00      	ldrb	r0, [r0, #16]
 80a1912:	f7ff f8c9 	bl	80a0aa8 <hal_usart_is_enabled>
 80a1916:	e7d5      	b.n	80a18c4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1918:	2001      	movs	r0, #1
 80a191a:	e7c6      	b.n	80a18aa <pinAvailable+0xa>
 80a191c:	20000634 	.word	0x20000634
 80a1920:	20000638 	.word	0x20000638
 80a1924:	20000070 	.word	0x20000070
 80a1928:	080a1891 	.word	0x080a1891

080a192c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a192c:	2817      	cmp	r0, #23
{
 80a192e:	b538      	push	{r3, r4, r5, lr}
 80a1930:	4604      	mov	r4, r0
 80a1932:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1934:	d80a      	bhi.n	80a194c <pinMode+0x20>
 80a1936:	29ff      	cmp	r1, #255	; 0xff
 80a1938:	d008      	beq.n	80a194c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a193a:	f7ff ffb1 	bl	80a18a0 <pinAvailable>
 80a193e:	b128      	cbz	r0, 80a194c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1940:	4629      	mov	r1, r5
 80a1942:	4620      	mov	r0, r4
}
 80a1944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1948:	f7ff b836 	b.w	80a09b8 <HAL_Pin_Mode>
}
 80a194c:	bd38      	pop	{r3, r4, r5, pc}

080a194e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a194e:	b510      	push	{r4, lr}
 80a1950:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1952:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1954:	bf9c      	itt	ls
 80a1956:	340a      	addls	r4, #10
 80a1958:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a195a:	4620      	mov	r0, r4
 80a195c:	f7ff ffa0 	bl	80a18a0 <pinAvailable>
 80a1960:	b150      	cbz	r0, 80a1978 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1962:	2103      	movs	r1, #3
 80a1964:	4620      	mov	r0, r4
 80a1966:	f7ff f81f 	bl	80a09a8 <HAL_Validate_Pin_Function>
 80a196a:	2803      	cmp	r0, #3
 80a196c:	d104      	bne.n	80a1978 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a196e:	4620      	mov	r0, r4
}
 80a1970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a1974:	f7ff b840 	b.w	80a09f8 <hal_adc_read>
}
 80a1978:	2000      	movs	r0, #0
 80a197a:	bd10      	pop	{r4, pc}

080a197c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a197c:	2300      	movs	r3, #0
 80a197e:	b513      	push	{r0, r1, r4, lr}
 80a1980:	4c07      	ldr	r4, [pc, #28]	; (80a19a0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1982:	461a      	mov	r2, r3
 80a1984:	4619      	mov	r1, r3
 80a1986:	4620      	mov	r0, r4
 80a1988:	9300      	str	r3, [sp, #0]
 80a198a:	f7ff fcb7 	bl	80a12fc <_ZN9IPAddressC1Ehhhh>
 80a198e:	4620      	mov	r0, r4
 80a1990:	4a04      	ldr	r2, [pc, #16]	; (80a19a4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1992:	4905      	ldr	r1, [pc, #20]	; (80a19a8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1994:	b002      	add	sp, #8
 80a1996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a199a:	f000 b847 	b.w	80a1a2c <__aeabi_atexit>
 80a199e:	bf00      	nop
 80a19a0:	20000648 	.word	0x20000648
 80a19a4:	20000070 	.word	0x20000070
 80a19a8:	080a124d 	.word	0x080a124d

080a19ac <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a19ac:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a19ae:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a19b0:	2520      	movs	r5, #32
 80a19b2:	8043      	strh	r3, [r0, #2]
 80a19b4:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19b6:	4e08      	ldr	r6, [pc, #32]	; (80a19d8 <_Z17acquireWireBufferv+0x2c>)
{
 80a19b8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a19ba:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19bc:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a19be:	6085      	str	r5, [r0, #8]
 80a19c0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19c2:	4628      	mov	r0, r5
 80a19c4:	f000 f839 	bl	80a1a3a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19c8:	4631      	mov	r1, r6
	};
 80a19ca:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a19cc:	4628      	mov	r0, r5
 80a19ce:	f000 f834 	bl	80a1a3a <_ZnajRKSt9nothrow_t>
	};
 80a19d2:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a19d4:	4620      	mov	r0, r4
 80a19d6:	bd70      	pop	{r4, r5, r6, pc}
 80a19d8:	080a2be4 	.word	0x080a2be4

080a19dc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a19dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a19de:	4d0f      	ldr	r5, [pc, #60]	; (80a1a1c <_Z19__fetch_global_Wirev+0x40>)
{
 80a19e0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a19e2:	7829      	ldrb	r1, [r5, #0]
 80a19e4:	f3bf 8f5b 	dmb	ish
 80a19e8:	f011 0401 	ands.w	r4, r1, #1
 80a19ec:	d113      	bne.n	80a1a16 <_Z19__fetch_global_Wirev+0x3a>
 80a19ee:	4628      	mov	r0, r5
 80a19f0:	f7fe fb57 	bl	80a00a2 <__cxa_guard_acquire>
 80a19f4:	b178      	cbz	r0, 80a1a16 <_Z19__fetch_global_Wirev+0x3a>
 80a19f6:	a801      	add	r0, sp, #4
 80a19f8:	f7ff ffd8 	bl	80a19ac <_Z17acquireWireBufferv>
 80a19fc:	4621      	mov	r1, r4
 80a19fe:	aa01      	add	r2, sp, #4
 80a1a00:	4807      	ldr	r0, [pc, #28]	; (80a1a20 <_Z19__fetch_global_Wirev+0x44>)
 80a1a02:	f7ff fe2b 	bl	80a165c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1a06:	4628      	mov	r0, r5
 80a1a08:	f7fe fb50 	bl	80a00ac <__cxa_guard_release>
 80a1a0c:	4a05      	ldr	r2, [pc, #20]	; (80a1a24 <_Z19__fetch_global_Wirev+0x48>)
 80a1a0e:	4906      	ldr	r1, [pc, #24]	; (80a1a28 <_Z19__fetch_global_Wirev+0x4c>)
 80a1a10:	4803      	ldr	r0, [pc, #12]	; (80a1a20 <_Z19__fetch_global_Wirev+0x44>)
 80a1a12:	f000 f80b 	bl	80a1a2c <__aeabi_atexit>
	return wire;
}
 80a1a16:	4802      	ldr	r0, [pc, #8]	; (80a1a20 <_Z19__fetch_global_Wirev+0x44>)
 80a1a18:	b007      	add	sp, #28
 80a1a1a:	bd30      	pop	{r4, r5, pc}
 80a1a1c:	20000660 	.word	0x20000660
 80a1a20:	20000664 	.word	0x20000664
 80a1a24:	20000070 	.word	0x20000070
 80a1a28:	080a1605 	.word	0x080a1605

080a1a2c <__aeabi_atexit>:
 80a1a2c:	460b      	mov	r3, r1
 80a1a2e:	4601      	mov	r1, r0
 80a1a30:	4618      	mov	r0, r3
 80a1a32:	f000 bf67 	b.w	80a2904 <__cxa_atexit>

080a1a36 <_ZdlPvj>:
 80a1a36:	f7fe bb32 	b.w	80a009e <_ZdlPv>

080a1a3a <_ZnajRKSt9nothrow_t>:
 80a1a3a:	f7fe bb2e 	b.w	80a009a <_Znaj>
	...

080a1a40 <__aeabi_drsub>:
 80a1a40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1a44:	e002      	b.n	80a1a4c <__adddf3>
 80a1a46:	bf00      	nop

080a1a48 <__aeabi_dsub>:
 80a1a48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1a4c <__adddf3>:
 80a1a4c:	b530      	push	{r4, r5, lr}
 80a1a4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1a52:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1a56:	ea94 0f05 	teq	r4, r5
 80a1a5a:	bf08      	it	eq
 80a1a5c:	ea90 0f02 	teqeq	r0, r2
 80a1a60:	bf1f      	itttt	ne
 80a1a62:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1a66:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1a6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1a6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1a72:	f000 80e2 	beq.w	80a1c3a <__adddf3+0x1ee>
 80a1a76:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1a7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1a7e:	bfb8      	it	lt
 80a1a80:	426d      	neglt	r5, r5
 80a1a82:	dd0c      	ble.n	80a1a9e <__adddf3+0x52>
 80a1a84:	442c      	add	r4, r5
 80a1a86:	ea80 0202 	eor.w	r2, r0, r2
 80a1a8a:	ea81 0303 	eor.w	r3, r1, r3
 80a1a8e:	ea82 0000 	eor.w	r0, r2, r0
 80a1a92:	ea83 0101 	eor.w	r1, r3, r1
 80a1a96:	ea80 0202 	eor.w	r2, r0, r2
 80a1a9a:	ea81 0303 	eor.w	r3, r1, r3
 80a1a9e:	2d36      	cmp	r5, #54	; 0x36
 80a1aa0:	bf88      	it	hi
 80a1aa2:	bd30      	pophi	{r4, r5, pc}
 80a1aa4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1aa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1aac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1ab0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1ab4:	d002      	beq.n	80a1abc <__adddf3+0x70>
 80a1ab6:	4240      	negs	r0, r0
 80a1ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1abc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1ac0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1ac4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1ac8:	d002      	beq.n	80a1ad0 <__adddf3+0x84>
 80a1aca:	4252      	negs	r2, r2
 80a1acc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1ad0:	ea94 0f05 	teq	r4, r5
 80a1ad4:	f000 80a7 	beq.w	80a1c26 <__adddf3+0x1da>
 80a1ad8:	f1a4 0401 	sub.w	r4, r4, #1
 80a1adc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1ae0:	db0d      	blt.n	80a1afe <__adddf3+0xb2>
 80a1ae2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1ae6:	fa22 f205 	lsr.w	r2, r2, r5
 80a1aea:	1880      	adds	r0, r0, r2
 80a1aec:	f141 0100 	adc.w	r1, r1, #0
 80a1af0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1af4:	1880      	adds	r0, r0, r2
 80a1af6:	fa43 f305 	asr.w	r3, r3, r5
 80a1afa:	4159      	adcs	r1, r3
 80a1afc:	e00e      	b.n	80a1b1c <__adddf3+0xd0>
 80a1afe:	f1a5 0520 	sub.w	r5, r5, #32
 80a1b02:	f10e 0e20 	add.w	lr, lr, #32
 80a1b06:	2a01      	cmp	r2, #1
 80a1b08:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1b0c:	bf28      	it	cs
 80a1b0e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1b12:	fa43 f305 	asr.w	r3, r3, r5
 80a1b16:	18c0      	adds	r0, r0, r3
 80a1b18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1b20:	d507      	bpl.n	80a1b32 <__adddf3+0xe6>
 80a1b22:	f04f 0e00 	mov.w	lr, #0
 80a1b26:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1b2a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1b2e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1b32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1b36:	d31b      	bcc.n	80a1b70 <__adddf3+0x124>
 80a1b38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1b3c:	d30c      	bcc.n	80a1b58 <__adddf3+0x10c>
 80a1b3e:	0849      	lsrs	r1, r1, #1
 80a1b40:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1b44:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1b48:	f104 0401 	add.w	r4, r4, #1
 80a1b4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1b50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1b54:	f080 809a 	bcs.w	80a1c8c <__adddf3+0x240>
 80a1b58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1b5c:	bf08      	it	eq
 80a1b5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1b62:	f150 0000 	adcs.w	r0, r0, #0
 80a1b66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1b6a:	ea41 0105 	orr.w	r1, r1, r5
 80a1b6e:	bd30      	pop	{r4, r5, pc}
 80a1b70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1b74:	4140      	adcs	r0, r0
 80a1b76:	eb41 0101 	adc.w	r1, r1, r1
 80a1b7a:	3c01      	subs	r4, #1
 80a1b7c:	bf28      	it	cs
 80a1b7e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1b82:	d2e9      	bcs.n	80a1b58 <__adddf3+0x10c>
 80a1b84:	f091 0f00 	teq	r1, #0
 80a1b88:	bf04      	itt	eq
 80a1b8a:	4601      	moveq	r1, r0
 80a1b8c:	2000      	moveq	r0, #0
 80a1b8e:	fab1 f381 	clz	r3, r1
 80a1b92:	bf08      	it	eq
 80a1b94:	3320      	addeq	r3, #32
 80a1b96:	f1a3 030b 	sub.w	r3, r3, #11
 80a1b9a:	f1b3 0220 	subs.w	r2, r3, #32
 80a1b9e:	da0c      	bge.n	80a1bba <__adddf3+0x16e>
 80a1ba0:	320c      	adds	r2, #12
 80a1ba2:	dd08      	ble.n	80a1bb6 <__adddf3+0x16a>
 80a1ba4:	f102 0c14 	add.w	ip, r2, #20
 80a1ba8:	f1c2 020c 	rsb	r2, r2, #12
 80a1bac:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1bb0:	fa21 f102 	lsr.w	r1, r1, r2
 80a1bb4:	e00c      	b.n	80a1bd0 <__adddf3+0x184>
 80a1bb6:	f102 0214 	add.w	r2, r2, #20
 80a1bba:	bfd8      	it	le
 80a1bbc:	f1c2 0c20 	rsble	ip, r2, #32
 80a1bc0:	fa01 f102 	lsl.w	r1, r1, r2
 80a1bc4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1bc8:	bfdc      	itt	le
 80a1bca:	ea41 010c 	orrle.w	r1, r1, ip
 80a1bce:	4090      	lslle	r0, r2
 80a1bd0:	1ae4      	subs	r4, r4, r3
 80a1bd2:	bfa2      	ittt	ge
 80a1bd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1bd8:	4329      	orrge	r1, r5
 80a1bda:	bd30      	popge	{r4, r5, pc}
 80a1bdc:	ea6f 0404 	mvn.w	r4, r4
 80a1be0:	3c1f      	subs	r4, #31
 80a1be2:	da1c      	bge.n	80a1c1e <__adddf3+0x1d2>
 80a1be4:	340c      	adds	r4, #12
 80a1be6:	dc0e      	bgt.n	80a1c06 <__adddf3+0x1ba>
 80a1be8:	f104 0414 	add.w	r4, r4, #20
 80a1bec:	f1c4 0220 	rsb	r2, r4, #32
 80a1bf0:	fa20 f004 	lsr.w	r0, r0, r4
 80a1bf4:	fa01 f302 	lsl.w	r3, r1, r2
 80a1bf8:	ea40 0003 	orr.w	r0, r0, r3
 80a1bfc:	fa21 f304 	lsr.w	r3, r1, r4
 80a1c00:	ea45 0103 	orr.w	r1, r5, r3
 80a1c04:	bd30      	pop	{r4, r5, pc}
 80a1c06:	f1c4 040c 	rsb	r4, r4, #12
 80a1c0a:	f1c4 0220 	rsb	r2, r4, #32
 80a1c0e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1c12:	fa01 f304 	lsl.w	r3, r1, r4
 80a1c16:	ea40 0003 	orr.w	r0, r0, r3
 80a1c1a:	4629      	mov	r1, r5
 80a1c1c:	bd30      	pop	{r4, r5, pc}
 80a1c1e:	fa21 f004 	lsr.w	r0, r1, r4
 80a1c22:	4629      	mov	r1, r5
 80a1c24:	bd30      	pop	{r4, r5, pc}
 80a1c26:	f094 0f00 	teq	r4, #0
 80a1c2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1c2e:	bf06      	itte	eq
 80a1c30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1c34:	3401      	addeq	r4, #1
 80a1c36:	3d01      	subne	r5, #1
 80a1c38:	e74e      	b.n	80a1ad8 <__adddf3+0x8c>
 80a1c3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c3e:	bf18      	it	ne
 80a1c40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1c44:	d029      	beq.n	80a1c9a <__adddf3+0x24e>
 80a1c46:	ea94 0f05 	teq	r4, r5
 80a1c4a:	bf08      	it	eq
 80a1c4c:	ea90 0f02 	teqeq	r0, r2
 80a1c50:	d005      	beq.n	80a1c5e <__adddf3+0x212>
 80a1c52:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1c56:	bf04      	itt	eq
 80a1c58:	4619      	moveq	r1, r3
 80a1c5a:	4610      	moveq	r0, r2
 80a1c5c:	bd30      	pop	{r4, r5, pc}
 80a1c5e:	ea91 0f03 	teq	r1, r3
 80a1c62:	bf1e      	ittt	ne
 80a1c64:	2100      	movne	r1, #0
 80a1c66:	2000      	movne	r0, #0
 80a1c68:	bd30      	popne	{r4, r5, pc}
 80a1c6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1c6e:	d105      	bne.n	80a1c7c <__adddf3+0x230>
 80a1c70:	0040      	lsls	r0, r0, #1
 80a1c72:	4149      	adcs	r1, r1
 80a1c74:	bf28      	it	cs
 80a1c76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1c7a:	bd30      	pop	{r4, r5, pc}
 80a1c7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1c80:	bf3c      	itt	cc
 80a1c82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1c86:	bd30      	popcc	{r4, r5, pc}
 80a1c88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1c90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1c94:	f04f 0000 	mov.w	r0, #0
 80a1c98:	bd30      	pop	{r4, r5, pc}
 80a1c9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c9e:	bf1a      	itte	ne
 80a1ca0:	4619      	movne	r1, r3
 80a1ca2:	4610      	movne	r0, r2
 80a1ca4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1ca8:	bf1c      	itt	ne
 80a1caa:	460b      	movne	r3, r1
 80a1cac:	4602      	movne	r2, r0
 80a1cae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1cb2:	bf06      	itte	eq
 80a1cb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1cb8:	ea91 0f03 	teqeq	r1, r3
 80a1cbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1cc0:	bd30      	pop	{r4, r5, pc}
 80a1cc2:	bf00      	nop

080a1cc4 <__aeabi_ui2d>:
 80a1cc4:	f090 0f00 	teq	r0, #0
 80a1cc8:	bf04      	itt	eq
 80a1cca:	2100      	moveq	r1, #0
 80a1ccc:	4770      	bxeq	lr
 80a1cce:	b530      	push	{r4, r5, lr}
 80a1cd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cd8:	f04f 0500 	mov.w	r5, #0
 80a1cdc:	f04f 0100 	mov.w	r1, #0
 80a1ce0:	e750      	b.n	80a1b84 <__adddf3+0x138>
 80a1ce2:	bf00      	nop

080a1ce4 <__aeabi_i2d>:
 80a1ce4:	f090 0f00 	teq	r0, #0
 80a1ce8:	bf04      	itt	eq
 80a1cea:	2100      	moveq	r1, #0
 80a1cec:	4770      	bxeq	lr
 80a1cee:	b530      	push	{r4, r5, lr}
 80a1cf0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cf4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cf8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1cfc:	bf48      	it	mi
 80a1cfe:	4240      	negmi	r0, r0
 80a1d00:	f04f 0100 	mov.w	r1, #0
 80a1d04:	e73e      	b.n	80a1b84 <__adddf3+0x138>
 80a1d06:	bf00      	nop

080a1d08 <__aeabi_f2d>:
 80a1d08:	0042      	lsls	r2, r0, #1
 80a1d0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1d0e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1d12:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1d16:	bf1f      	itttt	ne
 80a1d18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1d1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1d20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1d24:	4770      	bxne	lr
 80a1d26:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1d2a:	bf08      	it	eq
 80a1d2c:	4770      	bxeq	lr
 80a1d2e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1d32:	bf04      	itt	eq
 80a1d34:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1d38:	4770      	bxeq	lr
 80a1d3a:	b530      	push	{r4, r5, lr}
 80a1d3c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1d40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1d48:	e71c      	b.n	80a1b84 <__adddf3+0x138>
 80a1d4a:	bf00      	nop

080a1d4c <__aeabi_ul2d>:
 80a1d4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d50:	bf08      	it	eq
 80a1d52:	4770      	bxeq	lr
 80a1d54:	b530      	push	{r4, r5, lr}
 80a1d56:	f04f 0500 	mov.w	r5, #0
 80a1d5a:	e00a      	b.n	80a1d72 <__aeabi_l2d+0x16>

080a1d5c <__aeabi_l2d>:
 80a1d5c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d60:	bf08      	it	eq
 80a1d62:	4770      	bxeq	lr
 80a1d64:	b530      	push	{r4, r5, lr}
 80a1d66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1d6a:	d502      	bpl.n	80a1d72 <__aeabi_l2d+0x16>
 80a1d6c:	4240      	negs	r0, r0
 80a1d6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1d72:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d76:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1d7e:	f43f aed8 	beq.w	80a1b32 <__adddf3+0xe6>
 80a1d82:	f04f 0203 	mov.w	r2, #3
 80a1d86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d8a:	bf18      	it	ne
 80a1d8c:	3203      	addne	r2, #3
 80a1d8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d92:	bf18      	it	ne
 80a1d94:	3203      	addne	r2, #3
 80a1d96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1d9a:	f1c2 0320 	rsb	r3, r2, #32
 80a1d9e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1da2:	fa20 f002 	lsr.w	r0, r0, r2
 80a1da6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1daa:	ea40 000e 	orr.w	r0, r0, lr
 80a1dae:	fa21 f102 	lsr.w	r1, r1, r2
 80a1db2:	4414      	add	r4, r2
 80a1db4:	e6bd      	b.n	80a1b32 <__adddf3+0xe6>
 80a1db6:	bf00      	nop

080a1db8 <__aeabi_dmul>:
 80a1db8:	b570      	push	{r4, r5, r6, lr}
 80a1dba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1dbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1dc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1dc6:	bf1d      	ittte	ne
 80a1dc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1dcc:	ea94 0f0c 	teqne	r4, ip
 80a1dd0:	ea95 0f0c 	teqne	r5, ip
 80a1dd4:	f000 f8de 	bleq	80a1f94 <__aeabi_dmul+0x1dc>
 80a1dd8:	442c      	add	r4, r5
 80a1dda:	ea81 0603 	eor.w	r6, r1, r3
 80a1dde:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1de2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1de6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1dea:	bf18      	it	ne
 80a1dec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1df0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1df8:	d038      	beq.n	80a1e6c <__aeabi_dmul+0xb4>
 80a1dfa:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1dfe:	f04f 0500 	mov.w	r5, #0
 80a1e02:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1e06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1e0a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1e0e:	f04f 0600 	mov.w	r6, #0
 80a1e12:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1e16:	f09c 0f00 	teq	ip, #0
 80a1e1a:	bf18      	it	ne
 80a1e1c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1e20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1e24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1e28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1e2c:	d204      	bcs.n	80a1e38 <__aeabi_dmul+0x80>
 80a1e2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1e32:	416d      	adcs	r5, r5
 80a1e34:	eb46 0606 	adc.w	r6, r6, r6
 80a1e38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1e3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1e40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1e44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1e48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1e4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1e50:	bf88      	it	hi
 80a1e52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1e56:	d81e      	bhi.n	80a1e96 <__aeabi_dmul+0xde>
 80a1e58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1e5c:	bf08      	it	eq
 80a1e5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1e62:	f150 0000 	adcs.w	r0, r0, #0
 80a1e66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1e6a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1e70:	ea46 0101 	orr.w	r1, r6, r1
 80a1e74:	ea40 0002 	orr.w	r0, r0, r2
 80a1e78:	ea81 0103 	eor.w	r1, r1, r3
 80a1e7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1e80:	bfc2      	ittt	gt
 80a1e82:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1e86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1e8a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1e8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e90:	f04f 0e00 	mov.w	lr, #0
 80a1e94:	3c01      	subs	r4, #1
 80a1e96:	f300 80ab 	bgt.w	80a1ff0 <__aeabi_dmul+0x238>
 80a1e9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1e9e:	bfde      	ittt	le
 80a1ea0:	2000      	movle	r0, #0
 80a1ea2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1ea6:	bd70      	pople	{r4, r5, r6, pc}
 80a1ea8:	f1c4 0400 	rsb	r4, r4, #0
 80a1eac:	3c20      	subs	r4, #32
 80a1eae:	da35      	bge.n	80a1f1c <__aeabi_dmul+0x164>
 80a1eb0:	340c      	adds	r4, #12
 80a1eb2:	dc1b      	bgt.n	80a1eec <__aeabi_dmul+0x134>
 80a1eb4:	f104 0414 	add.w	r4, r4, #20
 80a1eb8:	f1c4 0520 	rsb	r5, r4, #32
 80a1ebc:	fa00 f305 	lsl.w	r3, r0, r5
 80a1ec0:	fa20 f004 	lsr.w	r0, r0, r4
 80a1ec4:	fa01 f205 	lsl.w	r2, r1, r5
 80a1ec8:	ea40 0002 	orr.w	r0, r0, r2
 80a1ecc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1ed0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1ed4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1ed8:	fa21 f604 	lsr.w	r6, r1, r4
 80a1edc:	eb42 0106 	adc.w	r1, r2, r6
 80a1ee0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ee4:	bf08      	it	eq
 80a1ee6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1eea:	bd70      	pop	{r4, r5, r6, pc}
 80a1eec:	f1c4 040c 	rsb	r4, r4, #12
 80a1ef0:	f1c4 0520 	rsb	r5, r4, #32
 80a1ef4:	fa00 f304 	lsl.w	r3, r0, r4
 80a1ef8:	fa20 f005 	lsr.w	r0, r0, r5
 80a1efc:	fa01 f204 	lsl.w	r2, r1, r4
 80a1f00:	ea40 0002 	orr.w	r0, r0, r2
 80a1f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1f0c:	f141 0100 	adc.w	r1, r1, #0
 80a1f10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f14:	bf08      	it	eq
 80a1f16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f1a:	bd70      	pop	{r4, r5, r6, pc}
 80a1f1c:	f1c4 0520 	rsb	r5, r4, #32
 80a1f20:	fa00 f205 	lsl.w	r2, r0, r5
 80a1f24:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1f28:	fa20 f304 	lsr.w	r3, r0, r4
 80a1f2c:	fa01 f205 	lsl.w	r2, r1, r5
 80a1f30:	ea43 0302 	orr.w	r3, r3, r2
 80a1f34:	fa21 f004 	lsr.w	r0, r1, r4
 80a1f38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f3c:	fa21 f204 	lsr.w	r2, r1, r4
 80a1f40:	ea20 0002 	bic.w	r0, r0, r2
 80a1f44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1f48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1f4c:	bf08      	it	eq
 80a1f4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f52:	bd70      	pop	{r4, r5, r6, pc}
 80a1f54:	f094 0f00 	teq	r4, #0
 80a1f58:	d10f      	bne.n	80a1f7a <__aeabi_dmul+0x1c2>
 80a1f5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1f5e:	0040      	lsls	r0, r0, #1
 80a1f60:	eb41 0101 	adc.w	r1, r1, r1
 80a1f64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1f68:	bf08      	it	eq
 80a1f6a:	3c01      	subeq	r4, #1
 80a1f6c:	d0f7      	beq.n	80a1f5e <__aeabi_dmul+0x1a6>
 80a1f6e:	ea41 0106 	orr.w	r1, r1, r6
 80a1f72:	f095 0f00 	teq	r5, #0
 80a1f76:	bf18      	it	ne
 80a1f78:	4770      	bxne	lr
 80a1f7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1f7e:	0052      	lsls	r2, r2, #1
 80a1f80:	eb43 0303 	adc.w	r3, r3, r3
 80a1f84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1f88:	bf08      	it	eq
 80a1f8a:	3d01      	subeq	r5, #1
 80a1f8c:	d0f7      	beq.n	80a1f7e <__aeabi_dmul+0x1c6>
 80a1f8e:	ea43 0306 	orr.w	r3, r3, r6
 80a1f92:	4770      	bx	lr
 80a1f94:	ea94 0f0c 	teq	r4, ip
 80a1f98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1f9c:	bf18      	it	ne
 80a1f9e:	ea95 0f0c 	teqne	r5, ip
 80a1fa2:	d00c      	beq.n	80a1fbe <__aeabi_dmul+0x206>
 80a1fa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1fa8:	bf18      	it	ne
 80a1faa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1fae:	d1d1      	bne.n	80a1f54 <__aeabi_dmul+0x19c>
 80a1fb0:	ea81 0103 	eor.w	r1, r1, r3
 80a1fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1fb8:	f04f 0000 	mov.w	r0, #0
 80a1fbc:	bd70      	pop	{r4, r5, r6, pc}
 80a1fbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1fc2:	bf06      	itte	eq
 80a1fc4:	4610      	moveq	r0, r2
 80a1fc6:	4619      	moveq	r1, r3
 80a1fc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1fcc:	d019      	beq.n	80a2002 <__aeabi_dmul+0x24a>
 80a1fce:	ea94 0f0c 	teq	r4, ip
 80a1fd2:	d102      	bne.n	80a1fda <__aeabi_dmul+0x222>
 80a1fd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1fd8:	d113      	bne.n	80a2002 <__aeabi_dmul+0x24a>
 80a1fda:	ea95 0f0c 	teq	r5, ip
 80a1fde:	d105      	bne.n	80a1fec <__aeabi_dmul+0x234>
 80a1fe0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1fe4:	bf1c      	itt	ne
 80a1fe6:	4610      	movne	r0, r2
 80a1fe8:	4619      	movne	r1, r3
 80a1fea:	d10a      	bne.n	80a2002 <__aeabi_dmul+0x24a>
 80a1fec:	ea81 0103 	eor.w	r1, r1, r3
 80a1ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1ff4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1ff8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1ffc:	f04f 0000 	mov.w	r0, #0
 80a2000:	bd70      	pop	{r4, r5, r6, pc}
 80a2002:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2006:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a200a:	bd70      	pop	{r4, r5, r6, pc}

080a200c <__aeabi_ddiv>:
 80a200c:	b570      	push	{r4, r5, r6, lr}
 80a200e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2012:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2016:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a201a:	bf1d      	ittte	ne
 80a201c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2020:	ea94 0f0c 	teqne	r4, ip
 80a2024:	ea95 0f0c 	teqne	r5, ip
 80a2028:	f000 f8a7 	bleq	80a217a <__aeabi_ddiv+0x16e>
 80a202c:	eba4 0405 	sub.w	r4, r4, r5
 80a2030:	ea81 0e03 	eor.w	lr, r1, r3
 80a2034:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2038:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a203c:	f000 8088 	beq.w	80a2150 <__aeabi_ddiv+0x144>
 80a2040:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2044:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2048:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a204c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2050:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2054:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2058:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a205c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2060:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2064:	429d      	cmp	r5, r3
 80a2066:	bf08      	it	eq
 80a2068:	4296      	cmpeq	r6, r2
 80a206a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a206e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2072:	d202      	bcs.n	80a207a <__aeabi_ddiv+0x6e>
 80a2074:	085b      	lsrs	r3, r3, #1
 80a2076:	ea4f 0232 	mov.w	r2, r2, rrx
 80a207a:	1ab6      	subs	r6, r6, r2
 80a207c:	eb65 0503 	sbc.w	r5, r5, r3
 80a2080:	085b      	lsrs	r3, r3, #1
 80a2082:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2086:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a208a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a208e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2092:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2096:	bf22      	ittt	cs
 80a2098:	1ab6      	subcs	r6, r6, r2
 80a209a:	4675      	movcs	r5, lr
 80a209c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a20a0:	085b      	lsrs	r3, r3, #1
 80a20a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a20aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20ae:	bf22      	ittt	cs
 80a20b0:	1ab6      	subcs	r6, r6, r2
 80a20b2:	4675      	movcs	r5, lr
 80a20b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a20b8:	085b      	lsrs	r3, r3, #1
 80a20ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20be:	ebb6 0e02 	subs.w	lr, r6, r2
 80a20c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20c6:	bf22      	ittt	cs
 80a20c8:	1ab6      	subcs	r6, r6, r2
 80a20ca:	4675      	movcs	r5, lr
 80a20cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a20d0:	085b      	lsrs	r3, r3, #1
 80a20d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a20d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a20da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a20de:	bf22      	ittt	cs
 80a20e0:	1ab6      	subcs	r6, r6, r2
 80a20e2:	4675      	movcs	r5, lr
 80a20e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a20e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a20ec:	d018      	beq.n	80a2120 <__aeabi_ddiv+0x114>
 80a20ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a20f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a20f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a20fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a20fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2102:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2106:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a210a:	d1c0      	bne.n	80a208e <__aeabi_ddiv+0x82>
 80a210c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2110:	d10b      	bne.n	80a212a <__aeabi_ddiv+0x11e>
 80a2112:	ea41 0100 	orr.w	r1, r1, r0
 80a2116:	f04f 0000 	mov.w	r0, #0
 80a211a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a211e:	e7b6      	b.n	80a208e <__aeabi_ddiv+0x82>
 80a2120:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2124:	bf04      	itt	eq
 80a2126:	4301      	orreq	r1, r0
 80a2128:	2000      	moveq	r0, #0
 80a212a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a212e:	bf88      	it	hi
 80a2130:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2134:	f63f aeaf 	bhi.w	80a1e96 <__aeabi_dmul+0xde>
 80a2138:	ebb5 0c03 	subs.w	ip, r5, r3
 80a213c:	bf04      	itt	eq
 80a213e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2142:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2146:	f150 0000 	adcs.w	r0, r0, #0
 80a214a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a214e:	bd70      	pop	{r4, r5, r6, pc}
 80a2150:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2154:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2158:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a215c:	bfc2      	ittt	gt
 80a215e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2162:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2166:	bd70      	popgt	{r4, r5, r6, pc}
 80a2168:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a216c:	f04f 0e00 	mov.w	lr, #0
 80a2170:	3c01      	subs	r4, #1
 80a2172:	e690      	b.n	80a1e96 <__aeabi_dmul+0xde>
 80a2174:	ea45 0e06 	orr.w	lr, r5, r6
 80a2178:	e68d      	b.n	80a1e96 <__aeabi_dmul+0xde>
 80a217a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a217e:	ea94 0f0c 	teq	r4, ip
 80a2182:	bf08      	it	eq
 80a2184:	ea95 0f0c 	teqeq	r5, ip
 80a2188:	f43f af3b 	beq.w	80a2002 <__aeabi_dmul+0x24a>
 80a218c:	ea94 0f0c 	teq	r4, ip
 80a2190:	d10a      	bne.n	80a21a8 <__aeabi_ddiv+0x19c>
 80a2192:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2196:	f47f af34 	bne.w	80a2002 <__aeabi_dmul+0x24a>
 80a219a:	ea95 0f0c 	teq	r5, ip
 80a219e:	f47f af25 	bne.w	80a1fec <__aeabi_dmul+0x234>
 80a21a2:	4610      	mov	r0, r2
 80a21a4:	4619      	mov	r1, r3
 80a21a6:	e72c      	b.n	80a2002 <__aeabi_dmul+0x24a>
 80a21a8:	ea95 0f0c 	teq	r5, ip
 80a21ac:	d106      	bne.n	80a21bc <__aeabi_ddiv+0x1b0>
 80a21ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a21b2:	f43f aefd 	beq.w	80a1fb0 <__aeabi_dmul+0x1f8>
 80a21b6:	4610      	mov	r0, r2
 80a21b8:	4619      	mov	r1, r3
 80a21ba:	e722      	b.n	80a2002 <__aeabi_dmul+0x24a>
 80a21bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a21c0:	bf18      	it	ne
 80a21c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a21c6:	f47f aec5 	bne.w	80a1f54 <__aeabi_dmul+0x19c>
 80a21ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a21ce:	f47f af0d 	bne.w	80a1fec <__aeabi_dmul+0x234>
 80a21d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a21d6:	f47f aeeb 	bne.w	80a1fb0 <__aeabi_dmul+0x1f8>
 80a21da:	e712      	b.n	80a2002 <__aeabi_dmul+0x24a>

080a21dc <__gedf2>:
 80a21dc:	f04f 3cff 	mov.w	ip, #4294967295
 80a21e0:	e006      	b.n	80a21f0 <__cmpdf2+0x4>
 80a21e2:	bf00      	nop

080a21e4 <__ledf2>:
 80a21e4:	f04f 0c01 	mov.w	ip, #1
 80a21e8:	e002      	b.n	80a21f0 <__cmpdf2+0x4>
 80a21ea:	bf00      	nop

080a21ec <__cmpdf2>:
 80a21ec:	f04f 0c01 	mov.w	ip, #1
 80a21f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a21f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a21f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a21fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2200:	bf18      	it	ne
 80a2202:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2206:	d01b      	beq.n	80a2240 <__cmpdf2+0x54>
 80a2208:	b001      	add	sp, #4
 80a220a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a220e:	bf0c      	ite	eq
 80a2210:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2214:	ea91 0f03 	teqne	r1, r3
 80a2218:	bf02      	ittt	eq
 80a221a:	ea90 0f02 	teqeq	r0, r2
 80a221e:	2000      	moveq	r0, #0
 80a2220:	4770      	bxeq	lr
 80a2222:	f110 0f00 	cmn.w	r0, #0
 80a2226:	ea91 0f03 	teq	r1, r3
 80a222a:	bf58      	it	pl
 80a222c:	4299      	cmppl	r1, r3
 80a222e:	bf08      	it	eq
 80a2230:	4290      	cmpeq	r0, r2
 80a2232:	bf2c      	ite	cs
 80a2234:	17d8      	asrcs	r0, r3, #31
 80a2236:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a223a:	f040 0001 	orr.w	r0, r0, #1
 80a223e:	4770      	bx	lr
 80a2240:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2248:	d102      	bne.n	80a2250 <__cmpdf2+0x64>
 80a224a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a224e:	d107      	bne.n	80a2260 <__cmpdf2+0x74>
 80a2250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2258:	d1d6      	bne.n	80a2208 <__cmpdf2+0x1c>
 80a225a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a225e:	d0d3      	beq.n	80a2208 <__cmpdf2+0x1c>
 80a2260:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2264:	4770      	bx	lr
 80a2266:	bf00      	nop

080a2268 <__aeabi_cdrcmple>:
 80a2268:	4684      	mov	ip, r0
 80a226a:	4610      	mov	r0, r2
 80a226c:	4662      	mov	r2, ip
 80a226e:	468c      	mov	ip, r1
 80a2270:	4619      	mov	r1, r3
 80a2272:	4663      	mov	r3, ip
 80a2274:	e000      	b.n	80a2278 <__aeabi_cdcmpeq>
 80a2276:	bf00      	nop

080a2278 <__aeabi_cdcmpeq>:
 80a2278:	b501      	push	{r0, lr}
 80a227a:	f7ff ffb7 	bl	80a21ec <__cmpdf2>
 80a227e:	2800      	cmp	r0, #0
 80a2280:	bf48      	it	mi
 80a2282:	f110 0f00 	cmnmi.w	r0, #0
 80a2286:	bd01      	pop	{r0, pc}

080a2288 <__aeabi_dcmpeq>:
 80a2288:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a228c:	f7ff fff4 	bl	80a2278 <__aeabi_cdcmpeq>
 80a2290:	bf0c      	ite	eq
 80a2292:	2001      	moveq	r0, #1
 80a2294:	2000      	movne	r0, #0
 80a2296:	f85d fb08 	ldr.w	pc, [sp], #8
 80a229a:	bf00      	nop

080a229c <__aeabi_dcmplt>:
 80a229c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22a0:	f7ff ffea 	bl	80a2278 <__aeabi_cdcmpeq>
 80a22a4:	bf34      	ite	cc
 80a22a6:	2001      	movcc	r0, #1
 80a22a8:	2000      	movcs	r0, #0
 80a22aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22ae:	bf00      	nop

080a22b0 <__aeabi_dcmple>:
 80a22b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22b4:	f7ff ffe0 	bl	80a2278 <__aeabi_cdcmpeq>
 80a22b8:	bf94      	ite	ls
 80a22ba:	2001      	movls	r0, #1
 80a22bc:	2000      	movhi	r0, #0
 80a22be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22c2:	bf00      	nop

080a22c4 <__aeabi_dcmpge>:
 80a22c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22c8:	f7ff ffce 	bl	80a2268 <__aeabi_cdrcmple>
 80a22cc:	bf94      	ite	ls
 80a22ce:	2001      	movls	r0, #1
 80a22d0:	2000      	movhi	r0, #0
 80a22d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22d6:	bf00      	nop

080a22d8 <__aeabi_dcmpgt>:
 80a22d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22dc:	f7ff ffc4 	bl	80a2268 <__aeabi_cdrcmple>
 80a22e0:	bf34      	ite	cc
 80a22e2:	2001      	movcc	r0, #1
 80a22e4:	2000      	movcs	r0, #0
 80a22e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22ea:	bf00      	nop

080a22ec <__aeabi_dcmpun>:
 80a22ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a22f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a22f4:	d102      	bne.n	80a22fc <__aeabi_dcmpun+0x10>
 80a22f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a22fa:	d10a      	bne.n	80a2312 <__aeabi_dcmpun+0x26>
 80a22fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2304:	d102      	bne.n	80a230c <__aeabi_dcmpun+0x20>
 80a2306:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a230a:	d102      	bne.n	80a2312 <__aeabi_dcmpun+0x26>
 80a230c:	f04f 0000 	mov.w	r0, #0
 80a2310:	4770      	bx	lr
 80a2312:	f04f 0001 	mov.w	r0, #1
 80a2316:	4770      	bx	lr

080a2318 <__aeabi_d2iz>:
 80a2318:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a231c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2320:	d215      	bcs.n	80a234e <__aeabi_d2iz+0x36>
 80a2322:	d511      	bpl.n	80a2348 <__aeabi_d2iz+0x30>
 80a2324:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2328:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a232c:	d912      	bls.n	80a2354 <__aeabi_d2iz+0x3c>
 80a232e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2336:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a233a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a233e:	fa23 f002 	lsr.w	r0, r3, r2
 80a2342:	bf18      	it	ne
 80a2344:	4240      	negne	r0, r0
 80a2346:	4770      	bx	lr
 80a2348:	f04f 0000 	mov.w	r0, #0
 80a234c:	4770      	bx	lr
 80a234e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2352:	d105      	bne.n	80a2360 <__aeabi_d2iz+0x48>
 80a2354:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2358:	bf08      	it	eq
 80a235a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a235e:	4770      	bx	lr
 80a2360:	f04f 0000 	mov.w	r0, #0
 80a2364:	4770      	bx	lr
 80a2366:	bf00      	nop

080a2368 <__aeabi_d2uiz>:
 80a2368:	004a      	lsls	r2, r1, #1
 80a236a:	d211      	bcs.n	80a2390 <__aeabi_d2uiz+0x28>
 80a236c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2370:	d211      	bcs.n	80a2396 <__aeabi_d2uiz+0x2e>
 80a2372:	d50d      	bpl.n	80a2390 <__aeabi_d2uiz+0x28>
 80a2374:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2378:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a237c:	d40e      	bmi.n	80a239c <__aeabi_d2uiz+0x34>
 80a237e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2386:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a238a:	fa23 f002 	lsr.w	r0, r3, r2
 80a238e:	4770      	bx	lr
 80a2390:	f04f 0000 	mov.w	r0, #0
 80a2394:	4770      	bx	lr
 80a2396:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a239a:	d102      	bne.n	80a23a2 <__aeabi_d2uiz+0x3a>
 80a239c:	f04f 30ff 	mov.w	r0, #4294967295
 80a23a0:	4770      	bx	lr
 80a23a2:	f04f 0000 	mov.w	r0, #0
 80a23a6:	4770      	bx	lr

080a23a8 <__aeabi_d2f>:
 80a23a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a23ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a23b0:	bf24      	itt	cs
 80a23b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a23b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a23ba:	d90d      	bls.n	80a23d8 <__aeabi_d2f+0x30>
 80a23bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a23c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a23c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a23c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a23cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a23d0:	bf08      	it	eq
 80a23d2:	f020 0001 	biceq.w	r0, r0, #1
 80a23d6:	4770      	bx	lr
 80a23d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a23dc:	d121      	bne.n	80a2422 <__aeabi_d2f+0x7a>
 80a23de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a23e2:	bfbc      	itt	lt
 80a23e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a23e8:	4770      	bxlt	lr
 80a23ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a23f2:	f1c2 0218 	rsb	r2, r2, #24
 80a23f6:	f1c2 0c20 	rsb	ip, r2, #32
 80a23fa:	fa10 f30c 	lsls.w	r3, r0, ip
 80a23fe:	fa20 f002 	lsr.w	r0, r0, r2
 80a2402:	bf18      	it	ne
 80a2404:	f040 0001 	orrne.w	r0, r0, #1
 80a2408:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a240c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2410:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2414:	ea40 000c 	orr.w	r0, r0, ip
 80a2418:	fa23 f302 	lsr.w	r3, r3, r2
 80a241c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2420:	e7cc      	b.n	80a23bc <__aeabi_d2f+0x14>
 80a2422:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2426:	d107      	bne.n	80a2438 <__aeabi_d2f+0x90>
 80a2428:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a242c:	bf1e      	ittt	ne
 80a242e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2432:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2436:	4770      	bxne	lr
 80a2438:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a243c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2440:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2444:	4770      	bx	lr
 80a2446:	bf00      	nop

080a2448 <__aeabi_frsub>:
 80a2448:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a244c:	e002      	b.n	80a2454 <__addsf3>
 80a244e:	bf00      	nop

080a2450 <__aeabi_fsub>:
 80a2450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2454 <__addsf3>:
 80a2454:	0042      	lsls	r2, r0, #1
 80a2456:	bf1f      	itttt	ne
 80a2458:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a245c:	ea92 0f03 	teqne	r2, r3
 80a2460:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2464:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2468:	d06a      	beq.n	80a2540 <__addsf3+0xec>
 80a246a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a246e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2472:	bfc1      	itttt	gt
 80a2474:	18d2      	addgt	r2, r2, r3
 80a2476:	4041      	eorgt	r1, r0
 80a2478:	4048      	eorgt	r0, r1
 80a247a:	4041      	eorgt	r1, r0
 80a247c:	bfb8      	it	lt
 80a247e:	425b      	neglt	r3, r3
 80a2480:	2b19      	cmp	r3, #25
 80a2482:	bf88      	it	hi
 80a2484:	4770      	bxhi	lr
 80a2486:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a248a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a248e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2492:	bf18      	it	ne
 80a2494:	4240      	negne	r0, r0
 80a2496:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a249a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a249e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a24a2:	bf18      	it	ne
 80a24a4:	4249      	negne	r1, r1
 80a24a6:	ea92 0f03 	teq	r2, r3
 80a24aa:	d03f      	beq.n	80a252c <__addsf3+0xd8>
 80a24ac:	f1a2 0201 	sub.w	r2, r2, #1
 80a24b0:	fa41 fc03 	asr.w	ip, r1, r3
 80a24b4:	eb10 000c 	adds.w	r0, r0, ip
 80a24b8:	f1c3 0320 	rsb	r3, r3, #32
 80a24bc:	fa01 f103 	lsl.w	r1, r1, r3
 80a24c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a24c4:	d502      	bpl.n	80a24cc <__addsf3+0x78>
 80a24c6:	4249      	negs	r1, r1
 80a24c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a24cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a24d0:	d313      	bcc.n	80a24fa <__addsf3+0xa6>
 80a24d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a24d6:	d306      	bcc.n	80a24e6 <__addsf3+0x92>
 80a24d8:	0840      	lsrs	r0, r0, #1
 80a24da:	ea4f 0131 	mov.w	r1, r1, rrx
 80a24de:	f102 0201 	add.w	r2, r2, #1
 80a24e2:	2afe      	cmp	r2, #254	; 0xfe
 80a24e4:	d251      	bcs.n	80a258a <__addsf3+0x136>
 80a24e6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a24ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a24ee:	bf08      	it	eq
 80a24f0:	f020 0001 	biceq.w	r0, r0, #1
 80a24f4:	ea40 0003 	orr.w	r0, r0, r3
 80a24f8:	4770      	bx	lr
 80a24fa:	0049      	lsls	r1, r1, #1
 80a24fc:	eb40 0000 	adc.w	r0, r0, r0
 80a2500:	3a01      	subs	r2, #1
 80a2502:	bf28      	it	cs
 80a2504:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a2508:	d2ed      	bcs.n	80a24e6 <__addsf3+0x92>
 80a250a:	fab0 fc80 	clz	ip, r0
 80a250e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2512:	ebb2 020c 	subs.w	r2, r2, ip
 80a2516:	fa00 f00c 	lsl.w	r0, r0, ip
 80a251a:	bfaa      	itet	ge
 80a251c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2520:	4252      	neglt	r2, r2
 80a2522:	4318      	orrge	r0, r3
 80a2524:	bfbc      	itt	lt
 80a2526:	40d0      	lsrlt	r0, r2
 80a2528:	4318      	orrlt	r0, r3
 80a252a:	4770      	bx	lr
 80a252c:	f092 0f00 	teq	r2, #0
 80a2530:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2534:	bf06      	itte	eq
 80a2536:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a253a:	3201      	addeq	r2, #1
 80a253c:	3b01      	subne	r3, #1
 80a253e:	e7b5      	b.n	80a24ac <__addsf3+0x58>
 80a2540:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2544:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2548:	bf18      	it	ne
 80a254a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a254e:	d021      	beq.n	80a2594 <__addsf3+0x140>
 80a2550:	ea92 0f03 	teq	r2, r3
 80a2554:	d004      	beq.n	80a2560 <__addsf3+0x10c>
 80a2556:	f092 0f00 	teq	r2, #0
 80a255a:	bf08      	it	eq
 80a255c:	4608      	moveq	r0, r1
 80a255e:	4770      	bx	lr
 80a2560:	ea90 0f01 	teq	r0, r1
 80a2564:	bf1c      	itt	ne
 80a2566:	2000      	movne	r0, #0
 80a2568:	4770      	bxne	lr
 80a256a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a256e:	d104      	bne.n	80a257a <__addsf3+0x126>
 80a2570:	0040      	lsls	r0, r0, #1
 80a2572:	bf28      	it	cs
 80a2574:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2578:	4770      	bx	lr
 80a257a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a257e:	bf3c      	itt	cc
 80a2580:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2584:	4770      	bxcc	lr
 80a2586:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a258a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a258e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2592:	4770      	bx	lr
 80a2594:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2598:	bf16      	itet	ne
 80a259a:	4608      	movne	r0, r1
 80a259c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a25a0:	4601      	movne	r1, r0
 80a25a2:	0242      	lsls	r2, r0, #9
 80a25a4:	bf06      	itte	eq
 80a25a6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a25aa:	ea90 0f01 	teqeq	r0, r1
 80a25ae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a25b2:	4770      	bx	lr

080a25b4 <__aeabi_ui2f>:
 80a25b4:	f04f 0300 	mov.w	r3, #0
 80a25b8:	e004      	b.n	80a25c4 <__aeabi_i2f+0x8>
 80a25ba:	bf00      	nop

080a25bc <__aeabi_i2f>:
 80a25bc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a25c0:	bf48      	it	mi
 80a25c2:	4240      	negmi	r0, r0
 80a25c4:	ea5f 0c00 	movs.w	ip, r0
 80a25c8:	bf08      	it	eq
 80a25ca:	4770      	bxeq	lr
 80a25cc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a25d0:	4601      	mov	r1, r0
 80a25d2:	f04f 0000 	mov.w	r0, #0
 80a25d6:	e01c      	b.n	80a2612 <__aeabi_l2f+0x2a>

080a25d8 <__aeabi_ul2f>:
 80a25d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a25dc:	bf08      	it	eq
 80a25de:	4770      	bxeq	lr
 80a25e0:	f04f 0300 	mov.w	r3, #0
 80a25e4:	e00a      	b.n	80a25fc <__aeabi_l2f+0x14>
 80a25e6:	bf00      	nop

080a25e8 <__aeabi_l2f>:
 80a25e8:	ea50 0201 	orrs.w	r2, r0, r1
 80a25ec:	bf08      	it	eq
 80a25ee:	4770      	bxeq	lr
 80a25f0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a25f4:	d502      	bpl.n	80a25fc <__aeabi_l2f+0x14>
 80a25f6:	4240      	negs	r0, r0
 80a25f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a25fc:	ea5f 0c01 	movs.w	ip, r1
 80a2600:	bf02      	ittt	eq
 80a2602:	4684      	moveq	ip, r0
 80a2604:	4601      	moveq	r1, r0
 80a2606:	2000      	moveq	r0, #0
 80a2608:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a260c:	bf08      	it	eq
 80a260e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2612:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2616:	fabc f28c 	clz	r2, ip
 80a261a:	3a08      	subs	r2, #8
 80a261c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2620:	db10      	blt.n	80a2644 <__aeabi_l2f+0x5c>
 80a2622:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2626:	4463      	add	r3, ip
 80a2628:	fa00 fc02 	lsl.w	ip, r0, r2
 80a262c:	f1c2 0220 	rsb	r2, r2, #32
 80a2630:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2634:	fa20 f202 	lsr.w	r2, r0, r2
 80a2638:	eb43 0002 	adc.w	r0, r3, r2
 80a263c:	bf08      	it	eq
 80a263e:	f020 0001 	biceq.w	r0, r0, #1
 80a2642:	4770      	bx	lr
 80a2644:	f102 0220 	add.w	r2, r2, #32
 80a2648:	fa01 fc02 	lsl.w	ip, r1, r2
 80a264c:	f1c2 0220 	rsb	r2, r2, #32
 80a2650:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2654:	fa21 f202 	lsr.w	r2, r1, r2
 80a2658:	eb43 0002 	adc.w	r0, r3, r2
 80a265c:	bf08      	it	eq
 80a265e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2662:	4770      	bx	lr

080a2664 <__aeabi_fmul>:
 80a2664:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2668:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a266c:	bf1e      	ittt	ne
 80a266e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2672:	ea92 0f0c 	teqne	r2, ip
 80a2676:	ea93 0f0c 	teqne	r3, ip
 80a267a:	d06f      	beq.n	80a275c <__aeabi_fmul+0xf8>
 80a267c:	441a      	add	r2, r3
 80a267e:	ea80 0c01 	eor.w	ip, r0, r1
 80a2682:	0240      	lsls	r0, r0, #9
 80a2684:	bf18      	it	ne
 80a2686:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a268a:	d01e      	beq.n	80a26ca <__aeabi_fmul+0x66>
 80a268c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2690:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2694:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2698:	fba0 3101 	umull	r3, r1, r0, r1
 80a269c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a26a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a26a4:	bf3e      	ittt	cc
 80a26a6:	0049      	lslcc	r1, r1, #1
 80a26a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a26ac:	005b      	lslcc	r3, r3, #1
 80a26ae:	ea40 0001 	orr.w	r0, r0, r1
 80a26b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a26b6:	2afd      	cmp	r2, #253	; 0xfd
 80a26b8:	d81d      	bhi.n	80a26f6 <__aeabi_fmul+0x92>
 80a26ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a26be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a26c2:	bf08      	it	eq
 80a26c4:	f020 0001 	biceq.w	r0, r0, #1
 80a26c8:	4770      	bx	lr
 80a26ca:	f090 0f00 	teq	r0, #0
 80a26ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a26d2:	bf08      	it	eq
 80a26d4:	0249      	lsleq	r1, r1, #9
 80a26d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a26da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a26de:	3a7f      	subs	r2, #127	; 0x7f
 80a26e0:	bfc2      	ittt	gt
 80a26e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a26e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a26ea:	4770      	bxgt	lr
 80a26ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a26f0:	f04f 0300 	mov.w	r3, #0
 80a26f4:	3a01      	subs	r2, #1
 80a26f6:	dc5d      	bgt.n	80a27b4 <__aeabi_fmul+0x150>
 80a26f8:	f112 0f19 	cmn.w	r2, #25
 80a26fc:	bfdc      	itt	le
 80a26fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2702:	4770      	bxle	lr
 80a2704:	f1c2 0200 	rsb	r2, r2, #0
 80a2708:	0041      	lsls	r1, r0, #1
 80a270a:	fa21 f102 	lsr.w	r1, r1, r2
 80a270e:	f1c2 0220 	rsb	r2, r2, #32
 80a2712:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2716:	ea5f 0031 	movs.w	r0, r1, rrx
 80a271a:	f140 0000 	adc.w	r0, r0, #0
 80a271e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2722:	bf08      	it	eq
 80a2724:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2728:	4770      	bx	lr
 80a272a:	f092 0f00 	teq	r2, #0
 80a272e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2732:	bf02      	ittt	eq
 80a2734:	0040      	lsleq	r0, r0, #1
 80a2736:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a273a:	3a01      	subeq	r2, #1
 80a273c:	d0f9      	beq.n	80a2732 <__aeabi_fmul+0xce>
 80a273e:	ea40 000c 	orr.w	r0, r0, ip
 80a2742:	f093 0f00 	teq	r3, #0
 80a2746:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a274a:	bf02      	ittt	eq
 80a274c:	0049      	lsleq	r1, r1, #1
 80a274e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2752:	3b01      	subeq	r3, #1
 80a2754:	d0f9      	beq.n	80a274a <__aeabi_fmul+0xe6>
 80a2756:	ea41 010c 	orr.w	r1, r1, ip
 80a275a:	e78f      	b.n	80a267c <__aeabi_fmul+0x18>
 80a275c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2760:	ea92 0f0c 	teq	r2, ip
 80a2764:	bf18      	it	ne
 80a2766:	ea93 0f0c 	teqne	r3, ip
 80a276a:	d00a      	beq.n	80a2782 <__aeabi_fmul+0x11e>
 80a276c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2770:	bf18      	it	ne
 80a2772:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2776:	d1d8      	bne.n	80a272a <__aeabi_fmul+0xc6>
 80a2778:	ea80 0001 	eor.w	r0, r0, r1
 80a277c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2780:	4770      	bx	lr
 80a2782:	f090 0f00 	teq	r0, #0
 80a2786:	bf17      	itett	ne
 80a2788:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a278c:	4608      	moveq	r0, r1
 80a278e:	f091 0f00 	teqne	r1, #0
 80a2792:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2796:	d014      	beq.n	80a27c2 <__aeabi_fmul+0x15e>
 80a2798:	ea92 0f0c 	teq	r2, ip
 80a279c:	d101      	bne.n	80a27a2 <__aeabi_fmul+0x13e>
 80a279e:	0242      	lsls	r2, r0, #9
 80a27a0:	d10f      	bne.n	80a27c2 <__aeabi_fmul+0x15e>
 80a27a2:	ea93 0f0c 	teq	r3, ip
 80a27a6:	d103      	bne.n	80a27b0 <__aeabi_fmul+0x14c>
 80a27a8:	024b      	lsls	r3, r1, #9
 80a27aa:	bf18      	it	ne
 80a27ac:	4608      	movne	r0, r1
 80a27ae:	d108      	bne.n	80a27c2 <__aeabi_fmul+0x15e>
 80a27b0:	ea80 0001 	eor.w	r0, r0, r1
 80a27b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a27b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a27bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a27c0:	4770      	bx	lr
 80a27c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a27c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a27ca:	4770      	bx	lr

080a27cc <__aeabi_fdiv>:
 80a27cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a27d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a27d4:	bf1e      	ittt	ne
 80a27d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a27da:	ea92 0f0c 	teqne	r2, ip
 80a27de:	ea93 0f0c 	teqne	r3, ip
 80a27e2:	d069      	beq.n	80a28b8 <__aeabi_fdiv+0xec>
 80a27e4:	eba2 0203 	sub.w	r2, r2, r3
 80a27e8:	ea80 0c01 	eor.w	ip, r0, r1
 80a27ec:	0249      	lsls	r1, r1, #9
 80a27ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a27f2:	d037      	beq.n	80a2864 <__aeabi_fdiv+0x98>
 80a27f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a27f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a27fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2800:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2804:	428b      	cmp	r3, r1
 80a2806:	bf38      	it	cc
 80a2808:	005b      	lslcc	r3, r3, #1
 80a280a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a280e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2812:	428b      	cmp	r3, r1
 80a2814:	bf24      	itt	cs
 80a2816:	1a5b      	subcs	r3, r3, r1
 80a2818:	ea40 000c 	orrcs.w	r0, r0, ip
 80a281c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2820:	bf24      	itt	cs
 80a2822:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2826:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a282a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a282e:	bf24      	itt	cs
 80a2830:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2834:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2838:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a283c:	bf24      	itt	cs
 80a283e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2842:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2846:	011b      	lsls	r3, r3, #4
 80a2848:	bf18      	it	ne
 80a284a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a284e:	d1e0      	bne.n	80a2812 <__aeabi_fdiv+0x46>
 80a2850:	2afd      	cmp	r2, #253	; 0xfd
 80a2852:	f63f af50 	bhi.w	80a26f6 <__aeabi_fmul+0x92>
 80a2856:	428b      	cmp	r3, r1
 80a2858:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a285c:	bf08      	it	eq
 80a285e:	f020 0001 	biceq.w	r0, r0, #1
 80a2862:	4770      	bx	lr
 80a2864:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2868:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a286c:	327f      	adds	r2, #127	; 0x7f
 80a286e:	bfc2      	ittt	gt
 80a2870:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2874:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2878:	4770      	bxgt	lr
 80a287a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a287e:	f04f 0300 	mov.w	r3, #0
 80a2882:	3a01      	subs	r2, #1
 80a2884:	e737      	b.n	80a26f6 <__aeabi_fmul+0x92>
 80a2886:	f092 0f00 	teq	r2, #0
 80a288a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a288e:	bf02      	ittt	eq
 80a2890:	0040      	lsleq	r0, r0, #1
 80a2892:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2896:	3a01      	subeq	r2, #1
 80a2898:	d0f9      	beq.n	80a288e <__aeabi_fdiv+0xc2>
 80a289a:	ea40 000c 	orr.w	r0, r0, ip
 80a289e:	f093 0f00 	teq	r3, #0
 80a28a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a28a6:	bf02      	ittt	eq
 80a28a8:	0049      	lsleq	r1, r1, #1
 80a28aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a28ae:	3b01      	subeq	r3, #1
 80a28b0:	d0f9      	beq.n	80a28a6 <__aeabi_fdiv+0xda>
 80a28b2:	ea41 010c 	orr.w	r1, r1, ip
 80a28b6:	e795      	b.n	80a27e4 <__aeabi_fdiv+0x18>
 80a28b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a28bc:	ea92 0f0c 	teq	r2, ip
 80a28c0:	d108      	bne.n	80a28d4 <__aeabi_fdiv+0x108>
 80a28c2:	0242      	lsls	r2, r0, #9
 80a28c4:	f47f af7d 	bne.w	80a27c2 <__aeabi_fmul+0x15e>
 80a28c8:	ea93 0f0c 	teq	r3, ip
 80a28cc:	f47f af70 	bne.w	80a27b0 <__aeabi_fmul+0x14c>
 80a28d0:	4608      	mov	r0, r1
 80a28d2:	e776      	b.n	80a27c2 <__aeabi_fmul+0x15e>
 80a28d4:	ea93 0f0c 	teq	r3, ip
 80a28d8:	d104      	bne.n	80a28e4 <__aeabi_fdiv+0x118>
 80a28da:	024b      	lsls	r3, r1, #9
 80a28dc:	f43f af4c 	beq.w	80a2778 <__aeabi_fmul+0x114>
 80a28e0:	4608      	mov	r0, r1
 80a28e2:	e76e      	b.n	80a27c2 <__aeabi_fmul+0x15e>
 80a28e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a28e8:	bf18      	it	ne
 80a28ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a28ee:	d1ca      	bne.n	80a2886 <__aeabi_fdiv+0xba>
 80a28f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a28f4:	f47f af5c 	bne.w	80a27b0 <__aeabi_fmul+0x14c>
 80a28f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a28fc:	f47f af3c 	bne.w	80a2778 <__aeabi_fmul+0x114>
 80a2900:	e75f      	b.n	80a27c2 <__aeabi_fmul+0x15e>
 80a2902:	bf00      	nop

080a2904 <__cxa_atexit>:
 80a2904:	b510      	push	{r4, lr}
 80a2906:	4604      	mov	r4, r0
 80a2908:	4804      	ldr	r0, [pc, #16]	; (80a291c <__cxa_atexit+0x18>)
 80a290a:	4613      	mov	r3, r2
 80a290c:	b120      	cbz	r0, 80a2918 <__cxa_atexit+0x14>
 80a290e:	460a      	mov	r2, r1
 80a2910:	2002      	movs	r0, #2
 80a2912:	4621      	mov	r1, r4
 80a2914:	f3af 8000 	nop.w
 80a2918:	bd10      	pop	{r4, pc}
 80a291a:	bf00      	nop
 80a291c:	00000000 	.word	0x00000000

080a2920 <memcpy>:
 80a2920:	440a      	add	r2, r1
 80a2922:	4291      	cmp	r1, r2
 80a2924:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2928:	d100      	bne.n	80a292c <memcpy+0xc>
 80a292a:	4770      	bx	lr
 80a292c:	b510      	push	{r4, lr}
 80a292e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2932:	4291      	cmp	r1, r2
 80a2934:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2938:	d1f9      	bne.n	80a292e <memcpy+0xe>
 80a293a:	bd10      	pop	{r4, pc}

080a293c <memset>:
 80a293c:	4603      	mov	r3, r0
 80a293e:	4402      	add	r2, r0
 80a2940:	4293      	cmp	r3, r2
 80a2942:	d100      	bne.n	80a2946 <memset+0xa>
 80a2944:	4770      	bx	lr
 80a2946:	f803 1b01 	strb.w	r1, [r3], #1
 80a294a:	e7f9      	b.n	80a2940 <memset+0x4>

080a294c <srand>:
 80a294c:	b538      	push	{r3, r4, r5, lr}
 80a294e:	4b0d      	ldr	r3, [pc, #52]	; (80a2984 <srand+0x38>)
 80a2950:	4604      	mov	r4, r0
 80a2952:	681d      	ldr	r5, [r3, #0]
 80a2954:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2956:	b97b      	cbnz	r3, 80a2978 <srand+0x2c>
 80a2958:	2018      	movs	r0, #24
 80a295a:	f7fe f9f5 	bl	80a0d48 <malloc>
 80a295e:	4a0a      	ldr	r2, [pc, #40]	; (80a2988 <srand+0x3c>)
 80a2960:	4b0a      	ldr	r3, [pc, #40]	; (80a298c <srand+0x40>)
 80a2962:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2964:	e9c0 2300 	strd	r2, r3, [r0]
 80a2968:	4b09      	ldr	r3, [pc, #36]	; (80a2990 <srand+0x44>)
 80a296a:	2201      	movs	r2, #1
 80a296c:	6083      	str	r3, [r0, #8]
 80a296e:	230b      	movs	r3, #11
 80a2970:	8183      	strh	r3, [r0, #12]
 80a2972:	2300      	movs	r3, #0
 80a2974:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2978:	2200      	movs	r2, #0
 80a297a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a297c:	611c      	str	r4, [r3, #16]
 80a297e:	615a      	str	r2, [r3, #20]
 80a2980:	bd38      	pop	{r3, r4, r5, pc}
 80a2982:	bf00      	nop
 80a2984:	2000000c 	.word	0x2000000c
 80a2988:	abcd330e 	.word	0xabcd330e
 80a298c:	e66d1234 	.word	0xe66d1234
 80a2990:	0005deec 	.word	0x0005deec

080a2994 <strlen>:
 80a2994:	4603      	mov	r3, r0
 80a2996:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a299a:	2a00      	cmp	r2, #0
 80a299c:	d1fb      	bne.n	80a2996 <strlen+0x2>
 80a299e:	1a18      	subs	r0, r3, r0
 80a29a0:	3801      	subs	r0, #1
 80a29a2:	4770      	bx	lr

080a29a4 <dynalib_user>:
 80a29a4:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a29b4:	0000 0000 7250 7365 2073 6e61 2079 656b     ....Press any ke
 80a29c4:	2079 6f74 6220 6765 6e69 4600 202c 4800     y to begin.F, .H
 80a29d4:	6d75 6469 7469 3a79 2500 202c 4200 7261     umidity:.%, .Bar
 80a29e4:	5f6f 6554 706d 003a 7250 7365 7573 6572     o_Temp:.Pressure
 80a29f4:	003a 5068 2c61 0020 6e69 482e 2067 5700     :.hPa, .in.Hg .W
 80a2a04:	6e69 2064 7053 6565 3a64 0020 706d 2c68     ind Speed: .mph,
 80a2a14:	0020 6957 646e 6c63 6369 3a6b 5700 6e69      .Windclick:.Win
 80a2a24:	7364 6570 6465 003a 504d 334c 3131 4135     dspeed:.MPL3115A
 80a2a34:	2032 6f46 6e75 0064 6953 3037 3132 4620     2 Found.Si7021 F
 80a2a44:	756f 646e 4800 5554 3132 2044 6f46 6e75     ound.HTU21D Foun
 80a2a54:	0064 504d 334c 3131 4135 2032 4f4e 2054     d.MPL3115A2 NOT 
 80a2a64:	6f46 6e75 0064 6f4e 5420 6d65 2f70 7548     Found.No Temp/Hu
 80a2a74:	696d 6964 7974 4420 7665 6369 2065 6544     midity Device De
 80a2a84:	6574 7463 6465 4e00 206f 6544 6976 6563     tected.No Device
 80a2a94:	2073 6544 6574 7463 6465 6e00 6e61 6900     s Detected.nan.i
 80a2aa4:	666e 6f00 6676 2e00 6100 7070 2500 2d59     nf.ovf...app.%Y-
 80a2ab4:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80a2ac4:	6100 6373 6974 656d 0000 0000               .asctime....

080a2ad0 <_ZTV9IPAddress>:
	...
 80a2ad8:	125d 080a 124d 080a 124f 080a               ]...M...O...

080a2ae4 <_ZTV9USBSerial>:
	...
 80a2aec:	1319 080a 137f 080a 1357 080a 0df1 080a     ........W.......
 80a2afc:	1349 080a 131b 080a 132b 080a 1379 080a     I.......+...y...
 80a2b0c:	133b 080a 1315 080a                         ;.......

080a2b14 <_ZTV11USARTSerial>:
	...
 80a2b1c:	1511 080a 1579 080a 1555 080a 0df1 080a     ....y...U.......
 80a2b2c:	1525 080a 1541 080a 1533 080a 154f 080a     %...A...3...O...
 80a2b3c:	1513 080a 1517 080a                         ........

080a2b44 <_ZTV7TwoWire>:
	...
 80a2b4c:	1605 080a 164f 080a 1627 080a 1607 080a     ....O...'.......
 80a2b5c:	162f 080a 1637 080a 163f 080a 1647 080a     /...7...?...G...

080a2b6c <_ZTVN5spark9WiFiClassE>:
	...
 80a2b74:	1797 080a 178d 080a 1783 080a 1701 080a     ................
 80a2b84:	1091 080a 1777 080a 17f5 080a 17fd 080a     ....w...........
 80a2b94:	176b 080a 1763 080a 1759 080a 174f 080a     k...c...Y...O...
 80a2ba4:	170b 080a                                   ....

080a2ba8 <_ZTVN5spark12NetworkClassE>:
	...
 80a2bb0:	17b5 080a 17bf 080a 17c9 080a 17d3 080a     ................
 80a2bc0:	17dd 080a 17e9 080a 17f5 080a 17fd 080a     ................
 80a2bd0:	1805 080a 1811 080a 1819 080a 1823 080a     ............#...
 80a2be0:	182d 080a                                   -...

080a2be4 <_ZSt7nothrow>:
	...

080a2be5 <link_const_variable_data_end>:
 80a2be5:	00          	.byte	0x00
	...

080a2be8 <link_constructors_location>:
 80a2be8:	080a04e9 	.word	0x080a04e9
 80a2bec:	080a0db5 	.word	0x080a0db5
 80a2bf0:	080a109d 	.word	0x080a109d
 80a2bf4:	080a10ad 	.word	0x080a10ad
 80a2bf8:	080a10e5 	.word	0x080a10e5
 80a2bfc:	080a17a1 	.word	0x080a17a1
 80a2c00:	080a187d 	.word	0x080a187d
 80a2c04:	080a197d 	.word	0x080a197d

080a2c08 <link_constructors_end>:
	...
